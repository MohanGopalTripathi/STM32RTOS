
helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000341c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b8  080036b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080036b8  080036b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b8  080036b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080036c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000074  08003734  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08003734  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009846  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000163b  00000000  00000000  000298ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  0002af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000608  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ec1  00000000  00000000  0002bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000672c  00000000  00000000  00041ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f26  00000000  00000000  000481dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002344  00000000  00000000  000d1180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035a4 	.word	0x080035a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080035a4 	.word	0x080035a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <main>:
//used for semi hosting
extern void initialise_monitor_handles();


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af02      	add	r7, sp, #8
	initialise_monitor_handles();
 80001f6:	f003 f95b 	bl	80034b0 <initialise_monitor_handles>

	printf("Hello World Code\n");
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <main+0x48>)
 80001fc:	f002 fbc6 	bl	800298c <puts>


	HAL_DeInit();
 8000200:	f000 f93c 	bl	800047c <HAL_DeInit>
	SystemCoreClockUpdate();
 8000204:	f000 f896 	bl	8000334 <SystemCoreClockUpdate>
	//1. Create two tasks : -task1 and task2
	xTaskCreate(vTask1Handler,"Task1",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandle1);
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <main+0x4c>)
 800020a:	9301      	str	r3, [sp, #4]
 800020c:	2302      	movs	r3, #2
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2300      	movs	r3, #0
 8000212:	2282      	movs	r2, #130	; 0x82
 8000214:	490a      	ldr	r1, [pc, #40]	; (8000240 <main+0x50>)
 8000216:	480b      	ldr	r0, [pc, #44]	; (8000244 <main+0x54>)
 8000218:	f000 feb2 	bl	8000f80 <xTaskCreate>
	xTaskCreate(vTask2Handler,"Task2",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandle2);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <main+0x58>)
 800021e:	9301      	str	r3, [sp, #4]
 8000220:	2302      	movs	r3, #2
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2300      	movs	r3, #0
 8000226:	2282      	movs	r2, #130	; 0x82
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <main+0x5c>)
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x60>)
 800022c:	f000 fea8 	bl	8000f80 <xTaskCreate>

	//2.start the scheduler
	vTaskStartScheduler();
 8000230:	f000 ffe4 	bl	80011fc <vTaskStartScheduler>

//program will never return here, task scheduler will give the controls to the task
	for(;;);
 8000234:	e7fe      	b.n	8000234 <main+0x44>
 8000236:	bf00      	nop
 8000238:	080035bc 	.word	0x080035bc
 800023c:	20000090 	.word	0x20000090
 8000240:	080035d0 	.word	0x080035d0
 8000244:	08000255 	.word	0x08000255
 8000248:	20000094 	.word	0x20000094
 800024c:	080035d8 	.word	0x080035d8
 8000250:	08000269 	.word	0x08000269

08000254 <vTask1Handler>:




void vTask1Handler(void *params)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Helo World from Task1\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <vTask1Handler+0x10>)
 800025e:	f002 fb95 	bl	800298c <puts>
 8000262:	e7fb      	b.n	800025c <vTask1Handler+0x8>
 8000264:	080035e0 	.word	0x080035e0

08000268 <vTask2Handler>:
	}

}

void vTask2Handler(void *params)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Helo World from Task2\n");
 8000270:	4801      	ldr	r0, [pc, #4]	; (8000278 <vTask2Handler+0x10>)
 8000272:	f002 fb8b 	bl	800298c <puts>
 8000276:	e7fb      	b.n	8000270 <vTask2Handler+0x8>
 8000278:	080035f8 	.word	0x080035f8

0800027c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800028e:	e7fe      	b.n	800028e <HardFault_Handler+0x4>

08000290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <MemManage_Handler+0x4>

08000296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029a:	e7fe      	b.n	800029a <BusFault_Handler+0x4>

0800029c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <UsageFault_Handler+0x4>

080002a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <_sbrk+0x50>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d102      	bne.n	80002c6 <_sbrk+0x16>
		heap_end = &end;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <_sbrk+0x50>)
 80002c2:	4a10      	ldr	r2, [pc, #64]	; (8000304 <_sbrk+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <_sbrk+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <_sbrk+0x50>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	466a      	mov	r2, sp
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d907      	bls.n	80002ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80002da:	f002 fa05 	bl	80026e8 <__errno>
 80002de:	4602      	mov	r2, r0
 80002e0:	230c      	movs	r3, #12
 80002e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	e006      	b.n	80002f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <_sbrk+0x50>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	4a03      	ldr	r2, [pc, #12]	; (8000300 <_sbrk+0x50>)
 80002f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80002f6:	68fb      	ldr	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000098 	.word	0x20000098
 8000304:	200002e0 	.word	0x200002e0

08000308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <SystemInit+0x28>)
 800030e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <SystemInit+0x28>)
 8000314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <SystemInit+0x28>)
 800031e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000322:	609a      	str	r2, [r3, #8]
#endif
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	2302      	movs	r3, #2
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800034e:	4b31      	ldr	r3, [pc, #196]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f003 030c 	and.w	r3, r3, #12
 8000356:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	2b04      	cmp	r3, #4
 800035c:	d007      	beq.n	800036e <SystemCoreClockUpdate+0x3a>
 800035e:	2b08      	cmp	r3, #8
 8000360:	d009      	beq.n	8000376 <SystemCoreClockUpdate+0x42>
 8000362:	2b00      	cmp	r3, #0
 8000364:	d13d      	bne.n	80003e2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 8000368:	4a2c      	ldr	r2, [pc, #176]	; (800041c <SystemCoreClockUpdate+0xe8>)
 800036a:	601a      	str	r2, [r3, #0]
      break;
 800036c:	e03d      	b.n	80003ea <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800036e:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 8000370:	4a2b      	ldr	r2, [pc, #172]	; (8000420 <SystemCoreClockUpdate+0xec>)
 8000372:	601a      	str	r2, [r3, #0]
      break;
 8000374:	e039      	b.n	80003ea <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	0d9b      	lsrs	r3, r3, #22
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800038a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00c      	beq.n	80003ac <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000392:	4a23      	ldr	r2, [pc, #140]	; (8000420 <SystemCoreClockUpdate+0xec>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	0992      	lsrs	r2, r2, #6
 80003a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	e00b      	b.n	80003c4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <SystemCoreClockUpdate+0xe8>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 80003b6:	6852      	ldr	r2, [r2, #4]
 80003b8:	0992      	lsrs	r2, r2, #6
 80003ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003be:	fb02 f303 	mul.w	r3, r2, r3
 80003c2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	0c1b      	lsrs	r3, r3, #16
 80003ca:	f003 0303 	and.w	r3, r3, #3
 80003ce:	3301      	adds	r3, #1
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 80003de:	6013      	str	r3, [r2, #0]
      break;
 80003e0:	e003      	b.n	80003ea <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <SystemCoreClockUpdate+0xe8>)
 80003e6:	601a      	str	r2, [r3, #0]
      break;
 80003e8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <SystemCoreClockUpdate+0xe0>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	f003 030f 	and.w	r3, r3, #15
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <SystemCoreClockUpdate+0xf0>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	fa22 f303 	lsr.w	r3, r2, r3
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <SystemCoreClockUpdate+0xe4>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	371c      	adds	r7, #28
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40023800 	.word	0x40023800
 8000418:	20000000 	.word	0x20000000
 800041c:	00f42400 	.word	0x00f42400
 8000420:	007a1200 	.word	0x007a1200
 8000424:	08003628 	.word	0x08003628

08000428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800042c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800042e:	e003      	b.n	8000438 <LoopCopyDataInit>

08000430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000436:	3104      	adds	r1, #4

08000438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800043c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800043e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000440:	d3f6      	bcc.n	8000430 <CopyDataInit>
  ldr  r2, =_sbss
 8000442:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000444:	e002      	b.n	800044c <LoopFillZerobss>

08000446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000448:	f842 3b04 	str.w	r3, [r2], #4

0800044c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800044e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000450:	d3f9      	bcc.n	8000446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000452:	f7ff ff59 	bl	8000308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000456:	f002 f94d 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800045a:	f7ff fec9 	bl	80001f0 <main>
  bx  lr    
 800045e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000460:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000464:	080036c0 	.word	0x080036c0
  ldr  r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800046c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000470:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000474:	200002dc 	.word	0x200002dc

08000478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000478:	e7fe      	b.n	8000478 <ADC_IRQHandler>
	...

0800047c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <HAL_DeInit+0x54>)
 8000482:	f04f 32ff 	mov.w	r2, #4294967295
 8000486:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <HAL_DeInit+0x54>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <HAL_DeInit+0x54>)
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_DeInit+0x54>)
 8000498:	2200      	movs	r2, #0
 800049a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_DeInit+0x54>)
 800049e:	f04f 32ff 	mov.w	r2, #4294967295
 80004a2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_DeInit+0x54>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_DeInit+0x54>)
 80004ac:	f04f 32ff 	mov.w	r2, #4294967295
 80004b0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <HAL_DeInit+0x54>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_DeInit+0x54>)
 80004ba:	f04f 32ff 	mov.w	r2, #4294967295
 80004be:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <HAL_DeInit+0x54>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80004c6:	f000 f805 	bl	80004d4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40023800 	.word	0x40023800

080004d4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f103 0208 	add.w	r2, r3, #8
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f04f 32ff 	mov.w	r2, #4294967295
 80004fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f103 0208 	add.w	r2, r3, #8
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f103 0208 	add.w	r2, r3, #8
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	689a      	ldr	r2, [r3, #8]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059a:	d103      	bne.n	80005a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e00c      	b.n	80005be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3308      	adds	r3, #8
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e002      	b.n	80005b2 <vListInsert+0x2e>
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d2f6      	bcs.n	80005ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	6892      	ldr	r2, [r2, #8]
 800060c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	6852      	ldr	r2, [r2, #4]
 8000616:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	429a      	cmp	r2, r3
 8000620:	d103      	bne.n	800062a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681b      	ldr	r3, [r3, #0]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000664:	f383 8811 	msr	BASEPRI, r3
 8000668:	f3bf 8f6f 	isb	sy
 800066c:	f3bf 8f4f 	dsb	sy
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	e7fe      	b.n	8000672 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000674:	f001 fefa 	bl	800246c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000684:	fb01 f303 	mul.w	r3, r1, r3
 8000688:	441a      	add	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006a4:	3b01      	subs	r3, #1
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006aa:	fb01 f303 	mul.w	r3, r1, r3
 80006ae:	441a      	add	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d114      	bne.n	80006f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01a      	beq.n	8000708 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3310      	adds	r3, #16
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fff6 	bl	80016c8 <xTaskRemoveFromEventList>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d012      	beq.n	8000708 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <xQueueGenericReset+0xcc>)
 80006e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	f3bf 8f4f 	dsb	sy
 80006ee:	f3bf 8f6f 	isb	sy
 80006f2:	e009      	b.n	8000708 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3310      	adds	r3, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fef2 	bl	80004e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3324      	adds	r3, #36	; 0x24
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff feed 	bl	80004e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000708:	f001 fede 	bl	80024c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800070c:	2301      	movs	r3, #1
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af02      	add	r7, sp, #8
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4613      	mov	r3, r2
 8000728:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d109      	bne.n	8000744 <xQueueGenericCreate+0x28>
 8000730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	e7fe      	b.n	8000742 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3350      	adds	r3, #80	; 0x50
 8000752:	4618      	mov	r0, r3
 8000754:	f001 ffa4 	bl	80026a0 <pvPortMalloc>
 8000758:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00d      	beq.n	800077c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3350      	adds	r3, #80	; 0x50
 8000768:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4613      	mov	r3, r2
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f000 f805 	bl	8000786 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800077c:	69bb      	ldr	r3, [r7, #24]
	}
 800077e:	4618      	mov	r0, r3
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e002      	b.n	80007a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007b4:	2101      	movs	r1, #1
 80007b6:	69b8      	ldr	r0, [r7, #24]
 80007b8:	f7ff ff48 	bl	800064c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	78fa      	ldrb	r2, [r7, #3]
 80007c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007da:	2300      	movs	r3, #0
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80007e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d109      	bne.n	80007fc <xQueueGenericSend+0x30>
 80007e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ec:	f383 8811 	msr	BASEPRI, r3
 80007f0:	f3bf 8f6f 	isb	sy
 80007f4:	f3bf 8f4f 	dsb	sy
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80007fa:	e7fe      	b.n	80007fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d103      	bne.n	800080a <xQueueGenericSend+0x3e>
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <xQueueGenericSend+0x42>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <xQueueGenericSend+0x44>
 800080e:	2300      	movs	r3, #0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <xQueueGenericSend+0x5c>
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	e7fe      	b.n	8000826 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d103      	bne.n	8000836 <xQueueGenericSend+0x6a>
 800082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000832:	2b01      	cmp	r3, #1
 8000834:	d101      	bne.n	800083a <xQueueGenericSend+0x6e>
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <xQueueGenericSend+0x70>
 800083a:	2300      	movs	r3, #0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d109      	bne.n	8000854 <xQueueGenericSend+0x88>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	623b      	str	r3, [r7, #32]
 8000852:	e7fe      	b.n	8000852 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000854:	f001 f8d0 	bl	80019f8 <xTaskGetSchedulerState>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <xQueueGenericSend+0x98>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <xQueueGenericSend+0x9c>
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <xQueueGenericSend+0x9e>
 8000868:	2300      	movs	r3, #0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d109      	bne.n	8000882 <xQueueGenericSend+0xb6>
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	61fb      	str	r3, [r7, #28]
 8000880:	e7fe      	b.n	8000880 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000882:	f001 fdf3 	bl	800246c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088e:	429a      	cmp	r2, r3
 8000890:	d302      	bcc.n	8000898 <xQueueGenericSend+0xcc>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d129      	bne.n	80008ec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800089e:	f000 fa03 	bl	8000ca8 <prvCopyDataToQueue>
 80008a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d010      	beq.n	80008ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ae:	3324      	adds	r3, #36	; 0x24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 ff09 	bl	80016c8 <xTaskRemoveFromEventList>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d013      	beq.n	80008e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80008bc:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <xQueueGenericSend+0x1f0>)
 80008be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	e00a      	b.n	80008e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <xQueueGenericSend+0x1f0>)
 80008d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80008e4:	f001 fdf0 	bl	80024c8 <vPortExitCritical>
				return pdPASS;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e063      	b.n	80009b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d103      	bne.n	80008fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80008f2:	f001 fde9 	bl	80024c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e05c      	b.n	80009b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80008fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d106      	bne.n	800090e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4618      	mov	r0, r3
 8000906:	f000 ff41 	bl	800178c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800090a:	2301      	movs	r3, #1
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800090e:	f001 fddb 	bl	80024c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000912:	f000 fcbf 	bl	8001294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000916:	f001 fda9 	bl	800246c <vPortEnterCritical>
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000920:	b25b      	sxtb	r3, r3
 8000922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000926:	d103      	bne.n	8000930 <xQueueGenericSend+0x164>
 8000928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000936:	b25b      	sxtb	r3, r3
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d103      	bne.n	8000946 <xQueueGenericSend+0x17a>
 800093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000946:	f001 fdbf 	bl	80024c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ff30 	bl	80017b8 <xTaskCheckForTimeOut>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d124      	bne.n	80009a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800095e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000960:	f000 fa9a 	bl	8000e98 <prvIsQueueFull>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d018      	beq.n	800099c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096c:	3310      	adds	r3, #16
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe5a 	bl	800162c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800097a:	f000 fa25 	bl	8000dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800097e:	f000 fc97 	bl	80012b0 <xTaskResumeAll>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	f47f af7c 	bne.w	8000882 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <xQueueGenericSend+0x1f0>)
 800098c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	f3bf 8f6f 	isb	sy
 800099a:	e772      	b.n	8000882 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800099c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800099e:	f000 fa13 	bl	8000dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80009a2:	f000 fc85 	bl	80012b0 <xTaskResumeAll>
 80009a6:	e76c      	b.n	8000882 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80009a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009aa:	f000 fa0d 	bl	8000dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80009ae:	f000 fc7f 	bl	80012b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80009b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b090      	sub	sp, #64	; 0x40
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80009d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d109      	bne.n	80009ec <xQueueGenericSendFromISR+0x2c>
 80009d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ea:	e7fe      	b.n	80009ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d103      	bne.n	80009fa <xQueueGenericSendFromISR+0x3a>
 80009f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <xQueueGenericSendFromISR+0x3e>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <xQueueGenericSendFromISR+0x40>
 80009fe:	2300      	movs	r3, #0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d109      	bne.n	8000a18 <xQueueGenericSendFromISR+0x58>
 8000a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	f3bf 8f6f 	isb	sy
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
 8000a16:	e7fe      	b.n	8000a16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d103      	bne.n	8000a26 <xQueueGenericSendFromISR+0x66>
 8000a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d101      	bne.n	8000a2a <xQueueGenericSendFromISR+0x6a>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <xQueueGenericSendFromISR+0x6c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <xQueueGenericSendFromISR+0x84>
 8000a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	623b      	str	r3, [r7, #32]
 8000a42:	e7fe      	b.n	8000a42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a44:	f001 fdee 	bl	8002624 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000a48:	f3ef 8211 	mrs	r2, BASEPRI
 8000a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a50:	f383 8811 	msr	BASEPRI, r3
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	f3bf 8f4f 	dsb	sy
 8000a5c:	61fa      	str	r2, [r7, #28]
 8000a5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000a60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d302      	bcc.n	8000a76 <xQueueGenericSendFromISR+0xb6>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d12f      	bne.n	8000ad6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a8c:	f000 f90c 	bl	8000ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000a90:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d112      	bne.n	8000ac0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d016      	beq.n	8000ad0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa4:	3324      	adds	r3, #36	; 0x24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fe0e 	bl	80016c8 <xTaskRemoveFromEventList>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00e      	beq.n	8000ad0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	e007      	b.n	8000ad0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	b25a      	sxtb	r2, r3
 8000aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000ad4:	e001      	b.n	8000ada <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000adc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3740      	adds	r7, #64	; 0x40
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d109      	bne.n	8000b1e <xQueueReceive+0x2e>
	__asm volatile
 8000b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0e:	f383 8811 	msr	BASEPRI, r3
 8000b12:	f3bf 8f6f 	isb	sy
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	e7fe      	b.n	8000b1c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d103      	bne.n	8000b2c <xQueueReceive+0x3c>
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <xQueueReceive+0x40>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <xQueueReceive+0x42>
 8000b30:	2300      	movs	r3, #0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <xQueueReceive+0x5a>
 8000b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3a:	f383 8811 	msr	BASEPRI, r3
 8000b3e:	f3bf 8f6f 	isb	sy
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e7fe      	b.n	8000b48 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b4a:	f000 ff55 	bl	80019f8 <xTaskGetSchedulerState>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <xQueueReceive+0x6a>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <xQueueReceive+0x6e>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <xQueueReceive+0x70>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <xQueueReceive+0x88>
 8000b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b68:	f383 8811 	msr	BASEPRI, r3
 8000b6c:	f3bf 8f6f 	isb	sy
 8000b70:	f3bf 8f4f 	dsb	sy
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	e7fe      	b.n	8000b76 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000b78:	f001 fc78 	bl	800246c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d01f      	beq.n	8000bc8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b8c:	f000 f8f6 	bl	8000d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00f      	beq.n	8000bc0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	3310      	adds	r3, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fd8f 	bl	80016c8 <xTaskRemoveFromEventList>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d007      	beq.n	8000bc0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <xQueueReceive+0x1b4>)
 8000bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000bc0:	f001 fc82 	bl	80024c8 <vPortExitCritical>
				return pdPASS;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e069      	b.n	8000c9c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bce:	f001 fc7b 	bl	80024c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e062      	b.n	8000c9c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fdd3 	bl	800178c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000bea:	f001 fc6d 	bl	80024c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000bee:	f000 fb51 	bl	8001294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000bf2:	f001 fc3b 	bl	800246c <vPortEnterCritical>
 8000bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c02:	d103      	bne.n	8000c0c <xQueueReceive+0x11c>
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d103      	bne.n	8000c22 <xQueueReceive+0x132>
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c22:	f001 fc51 	bl	80024c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fdc2 	bl	80017b8 <xTaskCheckForTimeOut>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d123      	bne.n	8000c82 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c3c:	f000 f916 	bl	8000e6c <prvIsQueueEmpty>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d017      	beq.n	8000c76 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c48:	3324      	adds	r3, #36	; 0x24
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fcec 	bl	800162c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c56:	f000 f8b7 	bl	8000dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000c5a:	f000 fb29 	bl	80012b0 <xTaskResumeAll>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d189      	bne.n	8000b78 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <xQueueReceive+0x1b4>)
 8000c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	f3bf 8f4f 	dsb	sy
 8000c70:	f3bf 8f6f 	isb	sy
 8000c74:	e780      	b.n	8000b78 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c78:	f000 f8a6 	bl	8000dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c7c:	f000 fb18 	bl	80012b0 <xTaskResumeAll>
 8000c80:	e77a      	b.n	8000b78 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c84:	f000 f8a0 	bl	8000dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c88:	f000 fb12 	bl	80012b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c8e:	f000 f8ed 	bl	8000e6c <prvIsQueueEmpty>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f43f af6f 	beq.w	8000b78 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000c9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	e000ed04 	.word	0xe000ed04

08000ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10d      	bne.n	8000ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d14d      	bne.n	8000d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 feae 	bl	8001a34 <xTaskPriorityDisinherit>
 8000cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	e043      	b.n	8000d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d119      	bne.n	8000d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6858      	ldr	r0, [r3, #4]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	f001 fd32 	bl	800275c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	441a      	add	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d32b      	bcc.n	8000d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	e026      	b.n	8000d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68d8      	ldr	r0, [r3, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	461a      	mov	r2, r3
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	f001 fd18 	bl	800275c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	425b      	negs	r3, r3
 8000d36:	441a      	add	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	425b      	negs	r3, r3
 8000d52:	441a      	add	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d105      	bne.n	8000d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000d72:	697b      	ldr	r3, [r7, #20]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d018      	beq.n	8000dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	441a      	add	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d303      	bcc.n	8000db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68d9      	ldr	r1, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	461a      	mov	r2, r3
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f001 fcce 	bl	800275c <memcpy>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000dd0:	f001 fb4c 	bl	800246c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ddc:	e011      	b.n	8000e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d012      	beq.n	8000e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3324      	adds	r3, #36	; 0x24
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fc6c 	bl	80016c8 <xTaskRemoveFromEventList>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000df6:	f000 fd3f 	bl	8001878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dce9      	bgt.n	8000dde <prvUnlockQueue+0x16>
 8000e0a:	e000      	b.n	8000e0e <prvUnlockQueue+0x46>
					break;
 8000e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000e16:	f001 fb57 	bl	80024c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000e1a:	f001 fb27 	bl	800246c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e26:	e011      	b.n	8000e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d012      	beq.n	8000e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3310      	adds	r3, #16
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc47 	bl	80016c8 <xTaskRemoveFromEventList>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000e40:	f000 fd1a 	bl	8001878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dce9      	bgt.n	8000e28 <prvUnlockQueue+0x60>
 8000e54:	e000      	b.n	8000e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000e60:	f001 fb32 	bl	80024c8 <vPortExitCritical>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000e74:	f001 fafa 	bl	800246c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e001      	b.n	8000e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000e8a:	f001 fb1d 	bl	80024c8 <vPortExitCritical>

	return xReturn;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ea0:	f001 fae4 	bl	800246c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d102      	bne.n	8000eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e001      	b.n	8000eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000eba:	f001 fb05 	bl	80024c8 <vPortExitCritical>

	return xReturn;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e014      	b.n	8000f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <vQueueAddToRegistry+0x4c>)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10b      	bne.n	8000efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000ee4:	490b      	ldr	r1, [pc, #44]	; (8000f14 <vQueueAddToRegistry+0x4c>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <vQueueAddToRegistry+0x4c>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000efa:	e005      	b.n	8000f08 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d9e7      	bls.n	8000ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000298 	.word	0x20000298

08000f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000f28:	f001 faa0 	bl	800246c <vPortEnterCritical>
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d103      	bne.n	8000f42 <vQueueWaitForMessageRestricted+0x2a>
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4e:	d103      	bne.n	8000f58 <vQueueWaitForMessageRestricted+0x40>
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f58:	f001 fab6 	bl	80024c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3324      	adds	r3, #36	; 0x24
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fb81 	bl	8001674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff28 	bl	8000dc8 <prvUnlockQueue>
	}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb83 	bl	80026a0 <pvPortMalloc>
 8000f9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00e      	beq.n	8000fc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000fa2:	2058      	movs	r0, #88	; 0x58
 8000fa4:	f001 fb7c 	bl	80026a0 <pvPortMalloc>
 8000fa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb6:	e005      	b.n	8000fc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f001 fb83 	bl	80026c4 <vPortFree>
 8000fbe:	e001      	b.n	8000fc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d013      	beq.n	8000ff2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9303      	str	r3, [sp, #12]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f80e 	bl	8001002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000fe6:	69f8      	ldr	r0, [r7, #28]
 8000fe8:	f000 f89a 	bl	8001120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	e002      	b.n	8000ff8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b088      	sub	sp, #32
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	461a      	mov	r2, r3
 800101a:	21a5      	movs	r1, #165	; 0xa5
 800101c:	f001 fba9 	bl	8002772 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800102a:	3b01      	subs	r3, #1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	f023 0307 	bic.w	r3, r3, #7
 8001038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <prvInitialiseNewTask+0x56>
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e7fe      	b.n	8001056 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01f      	beq.n	800109e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e012      	b.n	800108a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	4413      	add	r3, r2
 8001072:	3334      	adds	r3, #52	; 0x34
 8001074:	460a      	mov	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	3301      	adds	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	2b09      	cmp	r3, #9
 800108e:	d9e9      	bls.n	8001064 <prvInitialiseNewTask+0x62>
 8001090:	e000      	b.n	8001094 <prvInitialiseNewTask+0x92>
			{
				break;
 8001092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800109c:	e003      	b.n	80010a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d901      	bls.n	80010b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010ac:	2304      	movs	r3, #4
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80010b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ba:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80010bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010be:	2200      	movs	r2, #0
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	3304      	adds	r3, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa2b 	bl	8000522 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	3318      	adds	r3, #24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa26 	bl	8000522 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	f1c3 0205 	rsb	r2, r3, #5
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80010ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ee:	2200      	movs	r2, #0
 80010f0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	69b8      	ldr	r0, [r7, #24]
 8001100:	f001 f890 	bl	8002224 <pxPortInitialiseStack>
 8001104:	4602      	mov	r2, r0
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001128:	f001 f9a0 	bl	800246c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <prvAddNewTaskToReadyList+0xc0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <prvAddNewTaskToReadyList+0xc0>)
 8001134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <prvAddNewTaskToReadyList+0xc4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <prvAddNewTaskToReadyList+0xc4>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <prvAddNewTaskToReadyList+0xc0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d110      	bne.n	800116e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800114c:	f000 fbb8 	bl	80018c0 <prvInitialiseTaskLists>
 8001150:	e00d      	b.n	800116e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <prvAddNewTaskToReadyList+0xc8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <prvAddNewTaskToReadyList+0xc4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	429a      	cmp	r2, r3
 8001166:	d802      	bhi.n	800116e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <prvAddNewTaskToReadyList+0xc4>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <prvAddNewTaskToReadyList+0xcc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <prvAddNewTaskToReadyList+0xcc>)
 8001176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <prvAddNewTaskToReadyList+0xcc>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	2201      	movs	r2, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <prvAddNewTaskToReadyList+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <prvAddNewTaskToReadyList+0xd0>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <prvAddNewTaskToReadyList+0xd4>)
 80011a0:	441a      	add	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f7ff f9c7 	bl	800053c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80011ae:	f001 f98b 	bl	80024c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <prvAddNewTaskToReadyList+0xc8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00e      	beq.n	80011d8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <prvAddNewTaskToReadyList+0xc4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <prvAddNewTaskToReadyList+0xd8>)
 80011ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000174 	.word	0x20000174
 80011e4:	2000009c 	.word	0x2000009c
 80011e8:	20000180 	.word	0x20000180
 80011ec:	20000190 	.word	0x20000190
 80011f0:	2000017c 	.word	0x2000017c
 80011f4:	200000a0 	.word	0x200000a0
 80011f8:	e000ed04 	.word	0xe000ed04

080011fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <vTaskStartScheduler+0x80>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	2282      	movs	r2, #130	; 0x82
 800120e:	491c      	ldr	r1, [pc, #112]	; (8001280 <vTaskStartScheduler+0x84>)
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <vTaskStartScheduler+0x88>)
 8001212:	f7ff feb5 	bl	8000f80 <xTaskCreate>
 8001216:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800121e:	f000 fcf3 	bl	8001c08 <xTimerCreateTimerTask>
 8001222:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d115      	bne.n	8001256 <vTaskStartScheduler+0x5a>
 800122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122e:	f383 8811 	msr	BASEPRI, r3
 8001232:	f3bf 8f6f 	isb	sy
 8001236:	f3bf 8f4f 	dsb	sy
 800123a:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <vTaskStartScheduler+0x8c>)
 800123e:	f04f 32ff 	mov.w	r2, #4294967295
 8001242:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <vTaskStartScheduler+0x90>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <vTaskStartScheduler+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001250:	f001 f86e 	bl	8002330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001254:	e00d      	b.n	8001272 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d109      	bne.n	8001272 <vTaskStartScheduler+0x76>
 800125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	f3bf 8f6f 	isb	sy
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e7fe      	b.n	8001270 <vTaskStartScheduler+0x74>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000198 	.word	0x20000198
 8001280:	08003610 	.word	0x08003610
 8001284:	08001891 	.word	0x08001891
 8001288:	20000194 	.word	0x20000194
 800128c:	20000180 	.word	0x20000180
 8001290:	20000178 	.word	0x20000178

08001294 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <vTaskSuspendAll+0x18>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a03      	ldr	r2, [pc, #12]	; (80012ac <vTaskSuspendAll+0x18>)
 80012a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	2000019c 	.word	0x2000019c

080012b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <xTaskResumeAll+0x114>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <xTaskResumeAll+0x2a>
 80012c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ca:	f383 8811 	msr	BASEPRI, r3
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	f3bf 8f4f 	dsb	sy
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	e7fe      	b.n	80012d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80012da:	f001 f8c7 	bl	800246c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <xTaskResumeAll+0x114>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a37      	ldr	r2, [pc, #220]	; (80013c4 <xTaskResumeAll+0x114>)
 80012e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <xTaskResumeAll+0x114>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d161      	bne.n	80013b4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <xTaskResumeAll+0x118>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05d      	beq.n	80013b4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012f8:	e02e      	b.n	8001358 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <xTaskResumeAll+0x11c>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3318      	adds	r3, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f975 	bl	80005f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3304      	adds	r3, #4
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f970 	bl	80005f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131a:	2201      	movs	r2, #1
 800131c:	409a      	lsls	r2, r3
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <xTaskResumeAll+0x120>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <xTaskResumeAll+0x120>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <xTaskResumeAll+0x124>)
 8001336:	441a      	add	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3304      	adds	r3, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f7ff f8fc 	bl	800053c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <xTaskResumeAll+0x128>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	429a      	cmp	r2, r3
 8001350:	d302      	bcc.n	8001358 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <xTaskResumeAll+0x12c>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <xTaskResumeAll+0x11c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1cc      	bne.n	80012fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001366:	f000 fb27 	bl	80019b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <xTaskResumeAll+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d010      	beq.n	8001398 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001376:	f000 f847 	bl	8001408 <xTaskIncrementTick>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <xTaskResumeAll+0x12c>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3b01      	subs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f1      	bne.n	8001376 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <xTaskResumeAll+0x130>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <xTaskResumeAll+0x12c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <xTaskResumeAll+0x134>)
 80013a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f3bf 8f4f 	dsb	sy
 80013b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80013b4:	f001 f888 	bl	80024c8 <vPortExitCritical>

	return xAlreadyYielded;
 80013b8:	68bb      	ldr	r3, [r7, #8]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000019c 	.word	0x2000019c
 80013c8:	20000174 	.word	0x20000174
 80013cc:	20000134 	.word	0x20000134
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	200000a0 	.word	0x200000a0
 80013d8:	2000009c 	.word	0x2000009c
 80013dc:	20000188 	.word	0x20000188
 80013e0:	20000184 	.word	0x20000184
 80013e4:	e000ed04 	.word	0xe000ed04

080013e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <xTaskGetTickCount+0x1c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000178 	.word	0x20000178

08001408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <xTaskIncrementTick+0x144>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 808d 	bne.w	8001536 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <xTaskIncrementTick+0x148>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001424:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <xTaskIncrementTick+0x148>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11f      	bne.n	8001470 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <xTaskIncrementTick+0x14c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <xTaskIncrementTick+0x46>
 800143a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143e:	f383 8811 	msr	BASEPRI, r3
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	f3bf 8f4f 	dsb	sy
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	e7fe      	b.n	800144c <xTaskIncrementTick+0x44>
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <xTaskIncrementTick+0x14c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <xTaskIncrementTick+0x150>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <xTaskIncrementTick+0x14c>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4a3e      	ldr	r2, [pc, #248]	; (8001558 <xTaskIncrementTick+0x150>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <xTaskIncrementTick+0x154>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <xTaskIncrementTick+0x154>)
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	f000 faa4 	bl	80019b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <xTaskIncrementTick+0x158>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	429a      	cmp	r2, r3
 8001478:	d348      	bcc.n	800150c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <xTaskIncrementTick+0x14c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d104      	bne.n	800148e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <xTaskIncrementTick+0x158>)
 8001486:	f04f 32ff 	mov.w	r2, #4294967295
 800148a:	601a      	str	r2, [r3, #0]
					break;
 800148c:	e03e      	b.n	800150c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <xTaskIncrementTick+0x14c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d203      	bcs.n	80014ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80014a6:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <xTaskIncrementTick+0x158>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014ac:	e02e      	b.n	800150c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3304      	adds	r3, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f89f 	bl	80005f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3318      	adds	r3, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f896 	bl	80005f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <xTaskIncrementTick+0x15c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <xTaskIncrementTick+0x15c>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <xTaskIncrementTick+0x160>)
 80014ea:	441a      	add	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3304      	adds	r3, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff f822 	bl	800053c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <xTaskIncrementTick+0x164>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	429a      	cmp	r2, r3
 8001504:	d3b9      	bcc.n	800147a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800150a:	e7b6      	b.n	800147a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <xTaskIncrementTick+0x164>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	4915      	ldr	r1, [pc, #84]	; (8001568 <xTaskIncrementTick+0x160>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d901      	bls.n	8001528 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <xTaskIncrementTick+0x168>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e004      	b.n	8001540 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <xTaskIncrementTick+0x16c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <xTaskIncrementTick+0x16c>)
 800153e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001540:	697b      	ldr	r3, [r7, #20]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000019c 	.word	0x2000019c
 8001550:	20000178 	.word	0x20000178
 8001554:	2000012c 	.word	0x2000012c
 8001558:	20000130 	.word	0x20000130
 800155c:	2000018c 	.word	0x2000018c
 8001560:	20000194 	.word	0x20000194
 8001564:	2000017c 	.word	0x2000017c
 8001568:	200000a0 	.word	0x200000a0
 800156c:	2000009c 	.word	0x2000009c
 8001570:	20000188 	.word	0x20000188
 8001574:	20000184 	.word	0x20000184

08001578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <vTaskSwitchContext+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <vTaskSwitchContext+0xa4>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800158c:	e03e      	b.n	800160c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <vTaskSwitchContext+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <vTaskSwitchContext+0xa8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	f1c3 031f 	rsb	r3, r3, #31
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	491e      	ldr	r1, [pc, #120]	; (8001624 <vTaskSwitchContext+0xac>)
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	e7fe      	b.n	80015d0 <vTaskSwitchContext+0x58>
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <vTaskSwitchContext+0xac>)
 80015de:	4413      	add	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	3308      	adds	r3, #8
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d104      	bne.n	8001602 <vTaskSwitchContext+0x8a>
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <vTaskSwitchContext+0xb0>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	2000019c 	.word	0x2000019c
 800161c:	20000188 	.word	0x20000188
 8001620:	2000017c 	.word	0x2000017c
 8001624:	200000a0 	.word	0x200000a0
 8001628:	2000009c 	.word	0x2000009c

0800162c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <vTaskPlaceOnEventList+0x24>
 800163c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001640:	f383 8811 	msr	BASEPRI, r3
 8001644:	f3bf 8f6f 	isb	sy
 8001648:	f3bf 8f4f 	dsb	sy
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e7fe      	b.n	800164e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <vTaskPlaceOnEventList+0x44>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3318      	adds	r3, #24
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7fe ff93 	bl	8000584 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800165e:	2101      	movs	r1, #1
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f000 fa6b 	bl	8001b3c <prvAddCurrentTaskToDelayedList>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000009c 	.word	0x2000009c

08001674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <vTaskPlaceOnEventListRestricted+0x26>
 8001686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168a:	f383 8811 	msr	BASEPRI, r3
 800168e:	f3bf 8f6f 	isb	sy
 8001692:	f3bf 8f4f 	dsb	sy
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e7fe      	b.n	8001698 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3318      	adds	r3, #24
 80016a0:	4619      	mov	r1, r3
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7fe ff4a 	bl	800053c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f000 fa40 	bl	8001b3c <prvAddCurrentTaskToDelayedList>
	}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000009c 	.word	0x2000009c

080016c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <xTaskRemoveFromEventList+0x2a>
 80016de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e2:	f383 8811 	msr	BASEPRI, r3
 80016e6:	f3bf 8f6f 	isb	sy
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e7fe      	b.n	80016f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3318      	adds	r3, #24
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff7d 	bl	80005f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <xTaskRemoveFromEventList+0xac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d11c      	bne.n	800173e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	3304      	adds	r3, #4
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff74 	bl	80005f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <xTaskRemoveFromEventList+0xb0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <xTaskRemoveFromEventList+0xb0>)
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <xTaskRemoveFromEventList+0xb4>)
 800172e:	441a      	add	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	3304      	adds	r3, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f7fe ff00 	bl	800053c <vListInsertEnd>
 800173c:	e005      	b.n	800174a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3318      	adds	r3, #24
 8001742:	4619      	mov	r1, r3
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <xTaskRemoveFromEventList+0xb8>)
 8001746:	f7fe fef9 	bl	800053c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <xTaskRemoveFromEventList+0xbc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	429a      	cmp	r2, r3
 8001756:	d905      	bls.n	8001764 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001758:	2301      	movs	r3, #1
 800175a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <xTaskRemoveFromEventList+0xc0>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e001      	b.n	8001768 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001768:	697b      	ldr	r3, [r7, #20]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000019c 	.word	0x2000019c
 8001778:	2000017c 	.word	0x2000017c
 800177c:	200000a0 	.word	0x200000a0
 8001780:	20000134 	.word	0x20000134
 8001784:	2000009c 	.word	0x2000009c
 8001788:	20000188 	.word	0x20000188

0800178c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <vTaskInternalSetTimeOutState+0x24>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <vTaskInternalSetTimeOutState+0x28>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	2000018c 	.word	0x2000018c
 80017b4:	20000178 	.word	0x20000178

080017b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <xTaskCheckForTimeOut+0x24>
 80017c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017cc:	f383 8811 	msr	BASEPRI, r3
 80017d0:	f3bf 8f6f 	isb	sy
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	e7fe      	b.n	80017da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <xTaskCheckForTimeOut+0x3e>
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e7fe      	b.n	80017f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80017f6:	f000 fe39 	bl	800246c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <xTaskCheckForTimeOut+0xb8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001812:	d102      	bne.n	800181a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	e023      	b.n	8001862 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <xTaskCheckForTimeOut+0xbc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d007      	beq.n	8001836 <xTaskCheckForTimeOut+0x7e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	429a      	cmp	r2, r3
 800182e:	d302      	bcc.n	8001836 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001830:	2301      	movs	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	e015      	b.n	8001862 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d20b      	bcs.n	8001858 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad2      	subs	r2, r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff9d 	bl	800178c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e004      	b.n	8001862 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800185e:	2301      	movs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001862:	f000 fe31 	bl	80024c8 <vPortExitCritical>

	return xReturn;
 8001866:	69fb      	ldr	r3, [r7, #28]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000178 	.word	0x20000178
 8001874:	2000018c 	.word	0x2000018c

08001878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <vTaskMissedYield+0x14>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20000188 	.word	0x20000188

08001890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001898:	f000 f852 	bl	8001940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <prvIdleTask+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d9f9      	bls.n	8001898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <prvIdleTask+0x2c>)
 80018a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f3bf 8f4f 	dsb	sy
 80018b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80018b4:	e7f0      	b.n	8001898 <prvIdleTask+0x8>
 80018b6:	bf00      	nop
 80018b8:	200000a0 	.word	0x200000a0
 80018bc:	e000ed04 	.word	0xe000ed04

080018c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e00c      	b.n	80018e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <prvInitialiseTaskLists+0x60>)
 80018d8:	4413      	add	r3, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe01 	bl	80004e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d9ef      	bls.n	80018cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <prvInitialiseTaskLists+0x64>)
 80018ee:	f7fe fdf8 	bl	80004e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <prvInitialiseTaskLists+0x68>)
 80018f4:	f7fe fdf5 	bl	80004e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <prvInitialiseTaskLists+0x6c>)
 80018fa:	f7fe fdf2 	bl	80004e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <prvInitialiseTaskLists+0x70>)
 8001900:	f7fe fdef 	bl	80004e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <prvInitialiseTaskLists+0x74>)
 8001906:	f7fe fdec 	bl	80004e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <prvInitialiseTaskLists+0x78>)
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <prvInitialiseTaskLists+0x64>)
 800190e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <prvInitialiseTaskLists+0x7c>)
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <prvInitialiseTaskLists+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000a0 	.word	0x200000a0
 8001924:	20000104 	.word	0x20000104
 8001928:	20000118 	.word	0x20000118
 800192c:	20000134 	.word	0x20000134
 8001930:	20000148 	.word	0x20000148
 8001934:	20000160 	.word	0x20000160
 8001938:	2000012c 	.word	0x2000012c
 800193c:	20000130 	.word	0x20000130

08001940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001946:	e019      	b.n	800197c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001948:	f000 fd90 	bl	800246c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <prvCheckTasksWaitingTermination+0x4c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe4c 	bl	80005f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <prvCheckTasksWaitingTermination+0x50>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <prvCheckTasksWaitingTermination+0x50>)
 8001966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <prvCheckTasksWaitingTermination+0x54>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <prvCheckTasksWaitingTermination+0x54>)
 8001970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001972:	f000 fda9 	bl	80024c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f80e 	bl	8001998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <prvCheckTasksWaitingTermination+0x54>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e1      	bne.n	8001948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000148 	.word	0x20000148
 8001990:	20000174 	.word	0x20000174
 8001994:	2000015c 	.word	0x2000015c

08001998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fe8d 	bl	80026c4 <vPortFree>
			vPortFree( pxTCB );
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fe8a 	bl	80026c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <prvResetNextTaskUnblockTime+0x38>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d104      	bne.n	80019d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <prvResetNextTaskUnblockTime+0x3c>)
 80019ca:	f04f 32ff 	mov.w	r2, #4294967295
 80019ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80019d0:	e008      	b.n	80019e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <prvResetNextTaskUnblockTime+0x38>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <prvResetNextTaskUnblockTime+0x3c>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	2000012c 	.word	0x2000012c
 80019f4:	20000194 	.word	0x20000194

080019f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <xTaskGetSchedulerState+0x34>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	e008      	b.n	8001a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <xTaskGetSchedulerState+0x38>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001a14:	2302      	movs	r3, #2
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001a1e:	687b      	ldr	r3, [r7, #4]
	}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000180 	.word	0x20000180
 8001a30:	2000019c 	.word	0x2000019c

08001a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d06c      	beq.n	8001b24 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <xTaskPriorityDisinherit+0xfc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d009      	beq.n	8001a68 <xTaskPriorityDisinherit+0x34>
 8001a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e7fe      	b.n	8001a66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <xTaskPriorityDisinherit+0x50>
 8001a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a74:	f383 8811 	msr	BASEPRI, r3
 8001a78:	f3bf 8f6f 	isb	sy
 8001a7c:	f3bf 8f4f 	dsb	sy
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	e7fe      	b.n	8001a82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d044      	beq.n	8001b24 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d140      	bne.n	8001b24 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fda5 	bl	80005f6 <uxListRemove>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	491f      	ldr	r1, [pc, #124]	; (8001b34 <xTaskPriorityDisinherit+0x100>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <xTaskPriorityDisinherit+0xaa>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	2201      	movs	r2, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <xTaskPriorityDisinherit+0x104>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <xTaskPriorityDisinherit+0x104>)
 8001adc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f1c3 0205 	rsb	r2, r3, #5
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	2201      	movs	r2, #1
 8001af8:	409a      	lsls	r2, r3
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <xTaskPriorityDisinherit+0x104>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <xTaskPriorityDisinherit+0x104>)
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <xTaskPriorityDisinherit+0x100>)
 8001b12:	441a      	add	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7fe fd0e 	bl	800053c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001b20:	2301      	movs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001b24:	697b      	ldr	r3, [r7, #20]
	}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000009c 	.word	0x2000009c
 8001b34:	200000a0 	.word	0x200000a0
 8001b38:	2000017c 	.word	0x2000017c

08001b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <prvAddCurrentTaskToDelayedList+0xb0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3304      	adds	r3, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd4f 	bl	80005f6 <uxListRemove>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10b      	bne.n	8001b76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2201      	movs	r2, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4013      	ands	r3, r2
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001b74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d10a      	bne.n	8001b94 <prvAddCurrentTaskToDelayedList+0x58>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001b8e:	f7fe fcd5 	bl	800053c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001b92:	e026      	b.n	8001be2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d209      	bcs.n	8001bc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7fe fce3 	bl	8000584 <vListInsert>
}
 8001bbe:	e010      	b.n	8001be2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7fe fcd9 	bl	8000584 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d202      	bcs.n	8001be2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001bdc:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000178 	.word	0x20000178
 8001bf0:	2000009c 	.word	0x2000009c
 8001bf4:	2000017c 	.word	0x2000017c
 8001bf8:	20000160 	.word	0x20000160
 8001bfc:	20000130 	.word	0x20000130
 8001c00:	2000012c 	.word	0x2000012c
 8001c04:	20000194 	.word	0x20000194

08001c08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001c12:	f000 fad1 	bl	80021b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <xTimerCreateTimerTask+0x54>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <xTimerCreateTimerTask+0x58>)
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	2302      	movs	r3, #2
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c2c:	490d      	ldr	r1, [pc, #52]	; (8001c64 <xTimerCreateTimerTask+0x5c>)
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <xTimerCreateTimerTask+0x60>)
 8001c30:	f7ff f9a6 	bl	8000f80 <xTaskCreate>
 8001c34:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <xTimerCreateTimerTask+0x48>
 8001c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	e7fe      	b.n	8001c4e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001d0 	.word	0x200001d0
 8001c60:	200001d4 	.word	0x200001d4
 8001c64:	08003618 	.word	0x08003618
 8001c68:	08001d9d 	.word	0x08001d9d

08001c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <xTimerGenericCommand+0x2c>
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	623b      	str	r3, [r7, #32]
 8001c96:	e7fe      	b.n	8001c96 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <xTimerGenericCommand+0x94>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02a      	beq.n	8001cf6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	dc18      	bgt.n	8001ce4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001cb2:	f7ff fea1 	bl	80019f8 <xTaskGetSchedulerState>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d109      	bne.n	8001cd0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <xTimerGenericCommand+0x94>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	f107 0114 	add.w	r1, r7, #20
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc8:	f7fe fd80 	bl	80007cc <xQueueGenericSend>
 8001ccc:	6278      	str	r0, [r7, #36]	; 0x24
 8001cce:	e012      	b.n	8001cf6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <xTimerGenericCommand+0x94>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	f107 0114 	add.w	r1, r7, #20
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f7fe fd76 	bl	80007cc <xQueueGenericSend>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24
 8001ce2:	e008      	b.n	8001cf6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <xTimerGenericCommand+0x94>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f107 0114 	add.w	r1, r7, #20
 8001cec:	2300      	movs	r3, #0
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	f7fe fe66 	bl	80009c0 <xQueueGenericSendFromISR>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200001d0 	.word	0x200001d0

08001d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <prvProcessExpiredTimer+0x94>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc6a 	bl	80005f6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	18d1      	adds	r1, r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f000 f8d1 	bl	8001ee4 <prvInsertTimerInActiveList>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01e      	beq.n	8001d86 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	2100      	movs	r1, #0
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8a 	bl	8001c6c <xTimerGenericCommand>
 8001d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <prvProcessExpiredTimer+0x82>
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e7fe      	b.n	8001d72 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	4798      	blx	r3
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200001c8 	.word	0x200001c8

08001d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f857 	bl	8001e5c <prvGetNextExpireTime>
 8001dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4619      	mov	r1, r3
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f803 	bl	8001dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001dba:	f000 f8d5 	bl	8001f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001dbe:	e7f1      	b.n	8001da4 <prvTimerTask+0x8>

08001dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001dca:	f7ff fa63 	bl	8001294 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f866 	bl	8001ea4 <prvSampleTimeNow>
 8001dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d130      	bne.n	8001e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <prvProcessTimerOrBlockTask+0x3c>
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d806      	bhi.n	8001dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8001dee:	f7ff fa5f 	bl	80012b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff85 	bl	8001d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001dfa:	e024      	b.n	8001e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <prvProcessTimerOrBlockTask+0x90>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <prvProcessTimerOrBlockTask+0x50>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <prvProcessTimerOrBlockTask+0x52>
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <prvProcessTimerOrBlockTask+0x94>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7ff f879 	bl	8000f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001e26:	f7ff fa43 	bl	80012b0 <xTaskResumeAll>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <prvProcessTimerOrBlockTask+0x98>)
 8001e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	f3bf 8f6f 	isb	sy
}
 8001e40:	e001      	b.n	8001e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8001e42:	f7ff fa35 	bl	80012b0 <xTaskResumeAll>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001cc 	.word	0x200001cc
 8001e54:	200001d0 	.word	0x200001d0
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <prvGetNextExpireTime+0x44>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <prvGetNextExpireTime+0x16>
 8001e6e:	2201      	movs	r2, #1
 8001e70:	e000      	b.n	8001e74 <prvGetNextExpireTime+0x18>
 8001e72:	2200      	movs	r2, #0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <prvGetNextExpireTime+0x44>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e001      	b.n	8001e90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001e90:	68fb      	ldr	r3, [r7, #12]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200001c8 	.word	0x200001c8

08001ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001eac:	f7ff fa9c 	bl	80013e8 <xTaskGetTickCount>
 8001eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <prvSampleTimeNow+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d205      	bcs.n	8001ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8001ebc:	f000 f918 	bl	80020f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e002      	b.n	8001ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <prvSampleTimeNow+0x3c>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001d8 	.word	0x200001d8

08001ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d812      	bhi.n	8001f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e01b      	b.n	8001f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <prvInsertTimerInActiveList+0x7c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7fe fb2b 	bl	8000584 <vListInsert>
 8001f2e:	e012      	b.n	8001f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d206      	bcs.n	8001f46 <prvInsertTimerInActiveList+0x62>
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e007      	b.n	8001f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <prvInsertTimerInActiveList+0x80>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7fe fb17 	bl	8000584 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001f56:	697b      	ldr	r3, [r7, #20]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200001cc 	.word	0x200001cc
 8001f64:	200001c8 	.word	0x200001c8

08001f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f6e:	e0ac      	b.n	80020ca <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f2c0 80a8 	blt.w	80020c8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	3304      	adds	r3, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fb34 	bl	80005f6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff87 	bl	8001ea4 <prvSampleTimeNow>
 8001f96:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	f200 8095 	bhi.w	80020ca <prvProcessReceivedCommands+0x162>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <prvProcessReceivedCommands+0x40>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fd1 	.word	0x08001fd1
 8001fac:	08001fd1 	.word	0x08001fd1
 8001fb0:	08001fd1 	.word	0x08001fd1
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002057 	.word	0x08002057
 8001fbc:	0800209f 	.word	0x0800209f
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fd1 	.word	0x08001fd1
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	08002057 	.word	0x08002057
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	18d1      	adds	r1, r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ff0:	f7ff ff78 	bl	8001ee4 <prvInsertTimerInActiveList>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d067      	beq.n	80020ca <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d05c      	beq.n	80020ca <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	441a      	add	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	2100      	movs	r1, #0
 8002020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002022:	f7ff fe23 	bl	8001c6c <xTimerGenericCommand>
 8002026:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d14d      	bne.n	80020ca <prvProcessReceivedCommands+0x162>
 800202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e7fe      	b.n	8002040 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002054:	e039      	b.n	80020ca <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <prvProcessReceivedCommands+0x122>
 8002076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e7fe      	b.n	8002088 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	18d1      	adds	r1, r2, r3
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002098:	f7ff ff24 	bl	8001ee4 <prvInsertTimerInActiveList>
					break;
 800209c:	e015      	b.n	80020ca <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80020ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ae:	f000 fb09 	bl	80026c4 <vPortFree>
 80020b2:	e00a      	b.n	80020ca <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80020c6:	e000      	b.n	80020ca <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80020c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <prvProcessReceivedCommands+0x184>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f107 0108 	add.w	r1, r7, #8
 80020d2:	2200      	movs	r2, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd0b 	bl	8000af0 <xQueueReceive>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f af47 	bne.w	8001f70 <prvProcessReceivedCommands+0x8>
	}
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001d0 	.word	0x200001d0

080020f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80020f6:	e047      	b.n	8002188 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3304      	adds	r3, #4
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fa70 	bl	80005f6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02d      	beq.n	8002188 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	429a      	cmp	r2, r3
 800213c:	d90e      	bls.n	800215c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3304      	adds	r3, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f7fe fa15 	bl	8000584 <vListInsert>
 800215a:	e015      	b.n	8002188 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800215c:	2300      	movs	r3, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	2100      	movs	r1, #0
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff fd80 	bl	8001c6c <xTimerGenericCommand>
 800216c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <prvSwitchTimerLists+0x98>
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	e7fe      	b.n	8002186 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1b2      	bne.n	80020f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <prvSwitchTimerLists+0xc4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <prvSwitchTimerLists+0xc0>)
 800219e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <prvSwitchTimerLists+0xc4>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001c8 	.word	0x200001c8
 80021b4:	200001cc 	.word	0x200001cc

080021b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80021bc:	f000 f956 	bl	800246c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <prvCheckForValidListAndQueue+0x54>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11d      	bne.n	8002204 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <prvCheckForValidListAndQueue+0x58>)
 80021ca:	f7fe f98a 	bl	80004e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80021ce:	4811      	ldr	r0, [pc, #68]	; (8002214 <prvCheckForValidListAndQueue+0x5c>)
 80021d0:	f7fe f987 	bl	80004e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <prvCheckForValidListAndQueue+0x60>)
 80021d6:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <prvCheckForValidListAndQueue+0x58>)
 80021d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <prvCheckForValidListAndQueue+0x64>)
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <prvCheckForValidListAndQueue+0x5c>)
 80021de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80021e0:	2200      	movs	r2, #0
 80021e2:	210c      	movs	r1, #12
 80021e4:	200a      	movs	r0, #10
 80021e6:	f7fe fa99 	bl	800071c <xQueueGenericCreate>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <prvCheckForValidListAndQueue+0x54>)
 80021ee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <prvCheckForValidListAndQueue+0x54>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <prvCheckForValidListAndQueue+0x54>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4908      	ldr	r1, [pc, #32]	; (8002220 <prvCheckForValidListAndQueue+0x68>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fe62 	bl	8000ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002204:	f000 f960 	bl	80024c8 <vPortExitCritical>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200001d0 	.word	0x200001d0
 8002210:	200001a0 	.word	0x200001a0
 8002214:	200001b4 	.word	0x200001b4
 8002218:	200001c8 	.word	0x200001c8
 800221c:	200001cc 	.word	0x200001cc
 8002220:	08003620 	.word	0x08003620

08002224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b04      	subs	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3b04      	subs	r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f023 0201 	bic.w	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b04      	subs	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <pxPortInitialiseStack+0x64>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b14      	subs	r3, #20
 800225e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b04      	subs	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f06f 0202 	mvn.w	r2, #2
 8002272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b20      	subs	r3, #32
 8002278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	0800228d 	.word	0x0800228d

0800228c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <prvTaskExitError+0x50>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d009      	beq.n	80022b4 <prvTaskExitError+0x28>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e7fe      	b.n	80022b2 <prvTaskExitError+0x26>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80022c6:	bf00      	nop
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0fc      	beq.n	80022c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000004 	.word	0x20000004

080022e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <pxCurrentTCBConst2>)
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	6808      	ldr	r0, [r1, #0]
 80022e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ea:	f380 8809 	msr	PSP, r0
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f380 8811 	msr	BASEPRI, r0
 80022fa:	4770      	bx	lr
 80022fc:	f3af 8000 	nop.w

08002300 <pxCurrentTCBConst2>:
 8002300:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop

08002308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <prvPortStartFirstTask+0x24>)
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	6800      	ldr	r0, [r0, #0]
 800230e:	f380 8808 	msr	MSP, r0
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f380 8814 	msr	CONTROL, r0
 800231a:	b662      	cpsie	i
 800231c:	b661      	cpsie	f
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	df00      	svc	0
 8002328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800232a:	bf00      	nop
 800232c:	e000ed08 	.word	0xe000ed08

08002330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <xPortStartScheduler+0x118>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a44      	ldr	r2, [pc, #272]	; (800244c <xPortStartScheduler+0x11c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d109      	bne.n	8002354 <xPortStartScheduler+0x24>
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e7fe      	b.n	8002352 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <xPortStartScheduler+0x118>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <xPortStartScheduler+0x120>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d109      	bne.n	8002372 <xPortStartScheduler+0x42>
 800235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e7fe      	b.n	8002370 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <xPortStartScheduler+0x124>)
 8002374:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <xPortStartScheduler+0x128>)
 8002398:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <xPortStartScheduler+0x12c>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023a0:	e009      	b.n	80023b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <xPortStartScheduler+0x12c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a2c      	ldr	r2, [pc, #176]	; (800245c <xPortStartScheduler+0x12c>)
 80023aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d0ef      	beq.n	80023a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <xPortStartScheduler+0x12c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d009      	beq.n	80023e2 <xPortStartScheduler+0xb2>
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e7fe      	b.n	80023e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <xPortStartScheduler+0x12c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <xPortStartScheduler+0x12c>)
 80023ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <xPortStartScheduler+0x12c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <xPortStartScheduler+0x12c>)
 80023f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <xPortStartScheduler+0x130>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <xPortStartScheduler+0x130>)
 8002406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <xPortStartScheduler+0x130>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <xPortStartScheduler+0x130>)
 8002412:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002416:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002418:	f000 f8d6 	bl	80025c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <xPortStartScheduler+0x134>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002422:	f000 f8f5 	bl	8002610 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <xPortStartScheduler+0x138>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <xPortStartScheduler+0x138>)
 800242c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002430:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002432:	f7ff ff69 	bl	8002308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002436:	f7ff f89f 	bl	8001578 <vTaskSwitchContext>
	prvTaskExitError();
 800243a:	f7ff ff27 	bl	800228c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	e000ed00 	.word	0xe000ed00
 800244c:	410fc271 	.word	0x410fc271
 8002450:	410fc270 	.word	0x410fc270
 8002454:	e000e400 	.word	0xe000e400
 8002458:	200001dc 	.word	0x200001dc
 800245c:	200001e0 	.word	0x200001e0
 8002460:	e000ed20 	.word	0xe000ed20
 8002464:	20000004 	.word	0x20000004
 8002468:	e000ef34 	.word	0xe000ef34

0800246c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <vPortEnterCritical+0x54>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <vPortEnterCritical+0x54>)
 800248c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <vPortEnterCritical+0x54>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <vPortEnterCritical+0x58>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <vPortEnterCritical+0x48>
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	e7fe      	b.n	80024b2 <vPortEnterCritical+0x46>
	}
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000004 	.word	0x20000004
 80024c4:	e000ed04 	.word	0xe000ed04

080024c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <vPortExitCritical+0x4c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <vPortExitCritical+0x22>
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	e7fe      	b.n	80024e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <vPortExitCritical+0x4c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a08      	ldr	r2, [pc, #32]	; (8002514 <vPortExitCritical+0x4c>)
 80024f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <vPortExitCritical+0x4c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <vPortExitCritical+0x3e>
 80024fc:	2300      	movs	r3, #0
 80024fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004
	...

08002520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002520:	f3ef 8009 	mrs	r0, PSP
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <pxCurrentTCBConst>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f01e 0f10 	tst.w	lr, #16
 8002530:	bf08      	it	eq
 8002532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253a:	6010      	str	r0, [r2, #0]
 800253c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002544:	f380 8811 	msr	BASEPRI, r0
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f7ff f812 	bl	8001578 <vTaskSwitchContext>
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f380 8811 	msr	BASEPRI, r0
 800255c:	bc09      	pop	{r0, r3}
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	6808      	ldr	r0, [r1, #0]
 8002562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002566:	f01e 0f10 	tst.w	lr, #16
 800256a:	bf08      	it	eq
 800256c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002570:	f380 8809 	msr	PSP, r0
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w

08002580 <pxCurrentTCBConst>:
 8002580:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop

08002588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80025a0:	f7fe ff32 	bl	8001408 <xTaskIncrementTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <SysTick_Handler+0x3c>)
 80025ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <vPortSetupTimerInterrupt+0x34>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <vPortSetupTimerInterrupt+0x38>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <vPortSetupTimerInterrupt+0x3c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <vPortSetupTimerInterrupt+0x40>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	4a09      	ldr	r2, [pc, #36]	; (800260c <vPortSetupTimerInterrupt+0x44>)
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <vPortSetupTimerInterrupt+0x34>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010
 8002600:	e000e018 	.word	0xe000e018
 8002604:	20000000 	.word	0x20000000
 8002608:	10624dd3 	.word	0x10624dd3
 800260c:	e000e014 	.word	0xe000e014

08002610 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002610:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002620 <vPortEnableVFP+0x10>
 8002614:	6801      	ldr	r1, [r0, #0]
 8002616:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800261a:	6001      	str	r1, [r0, #0]
 800261c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800261e:	bf00      	nop
 8002620:	e000ed88 	.word	0xe000ed88

08002624 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800262a:	f3ef 8305 	mrs	r3, IPSR
 800262e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	d913      	bls.n	800265e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002636:	4a16      	ldr	r2, [pc, #88]	; (8002690 <vPortValidateInterruptPriority+0x6c>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <vPortValidateInterruptPriority+0x70>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	7afa      	ldrb	r2, [r7, #11]
 8002646:	429a      	cmp	r2, r3
 8002648:	d209      	bcs.n	800265e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	e7fe      	b.n	800265c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <vPortValidateInterruptPriority+0x74>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <vPortValidateInterruptPriority+0x78>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d909      	bls.n	8002682 <vPortValidateInterruptPriority+0x5e>
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	e7fe      	b.n	8002680 <vPortValidateInterruptPriority+0x5c>
	}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e3f0 	.word	0xe000e3f0
 8002694:	200001dc 	.word	0x200001dc
 8002698:	e000ed0c 	.word	0xe000ed0c
 800269c:	200001e0 	.word	0x200001e0

080026a0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80026a8:	f7fe fdf4 	bl	8001294 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f845 	bl	800273c <malloc>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80026b6:	f7fe fdfb 	bl	80012b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	if( pv )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80026d2:	f7fe fddf 	bl	8001294 <vTaskSuspendAll>
		{
			free( pv );
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f838 	bl	800274c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80026dc:	f7fe fde8 	bl	80012b0 <xTaskResumeAll>
	}
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <__errno>:
 80026e8:	4b01      	ldr	r3, [pc, #4]	; (80026f0 <__errno+0x8>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4e0d      	ldr	r6, [pc, #52]	; (800272c <__libc_init_array+0x38>)
 80026f8:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fa:	1ba4      	subs	r4, r4, r6
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	2500      	movs	r5, #0
 8002700:	42a5      	cmp	r5, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	4e0b      	ldr	r6, [pc, #44]	; (8002734 <__libc_init_array+0x40>)
 8002706:	4c0c      	ldr	r4, [pc, #48]	; (8002738 <__libc_init_array+0x44>)
 8002708:	f000 ff4c 	bl	80035a4 <_init>
 800270c:	1ba4      	subs	r4, r4, r6
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	2500      	movs	r5, #0
 8002712:	42a5      	cmp	r5, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271c:	4798      	blx	r3
 800271e:	3501      	adds	r5, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002726:	4798      	blx	r3
 8002728:	3501      	adds	r5, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	080036b8 	.word	0x080036b8
 8002730:	080036b8 	.word	0x080036b8
 8002734:	080036b8 	.word	0x080036b8
 8002738:	080036bc 	.word	0x080036bc

0800273c <malloc>:
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <malloc+0xc>)
 800273e:	4601      	mov	r1, r0
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f000 b86d 	b.w	8002820 <_malloc_r>
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008

0800274c <free>:
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <free+0xc>)
 800274e:	4601      	mov	r1, r0
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	f000 b817 	b.w	8002784 <_free_r>
 8002756:	bf00      	nop
 8002758:	20000008 	.word	0x20000008

0800275c <memcpy>:
 800275c:	b510      	push	{r4, lr}
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	440a      	add	r2, r1
 8002762:	4291      	cmp	r1, r2
 8002764:	d100      	bne.n	8002768 <memcpy+0xc>
 8002766:	bd10      	pop	{r4, pc}
 8002768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800276c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002770:	e7f7      	b.n	8002762 <memcpy+0x6>

08002772 <memset>:
 8002772:	4402      	add	r2, r0
 8002774:	4603      	mov	r3, r0
 8002776:	4293      	cmp	r3, r2
 8002778:	d100      	bne.n	800277c <memset+0xa>
 800277a:	4770      	bx	lr
 800277c:	f803 1b01 	strb.w	r1, [r3], #1
 8002780:	e7f9      	b.n	8002776 <memset+0x4>
	...

08002784 <_free_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4605      	mov	r5, r0
 8002788:	2900      	cmp	r1, #0
 800278a:	d045      	beq.n	8002818 <_free_r+0x94>
 800278c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002790:	1f0c      	subs	r4, r1, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	bfb8      	it	lt
 8002796:	18e4      	addlt	r4, r4, r3
 8002798:	f000 fbae 	bl	8002ef8 <__malloc_lock>
 800279c:	4a1f      	ldr	r2, [pc, #124]	; (800281c <_free_r+0x98>)
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	4610      	mov	r0, r2
 80027a2:	b933      	cbnz	r3, 80027b2 <_free_r+0x2e>
 80027a4:	6063      	str	r3, [r4, #4]
 80027a6:	6014      	str	r4, [r2, #0]
 80027a8:	4628      	mov	r0, r5
 80027aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ae:	f000 bba4 	b.w	8002efa <__malloc_unlock>
 80027b2:	42a3      	cmp	r3, r4
 80027b4:	d90c      	bls.n	80027d0 <_free_r+0x4c>
 80027b6:	6821      	ldr	r1, [r4, #0]
 80027b8:	1862      	adds	r2, r4, r1
 80027ba:	4293      	cmp	r3, r2
 80027bc:	bf04      	itt	eq
 80027be:	681a      	ldreq	r2, [r3, #0]
 80027c0:	685b      	ldreq	r3, [r3, #4]
 80027c2:	6063      	str	r3, [r4, #4]
 80027c4:	bf04      	itt	eq
 80027c6:	1852      	addeq	r2, r2, r1
 80027c8:	6022      	streq	r2, [r4, #0]
 80027ca:	6004      	str	r4, [r0, #0]
 80027cc:	e7ec      	b.n	80027a8 <_free_r+0x24>
 80027ce:	4613      	mov	r3, r2
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	b10a      	cbz	r2, 80027d8 <_free_r+0x54>
 80027d4:	42a2      	cmp	r2, r4
 80027d6:	d9fa      	bls.n	80027ce <_free_r+0x4a>
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	1858      	adds	r0, r3, r1
 80027dc:	42a0      	cmp	r0, r4
 80027de:	d10b      	bne.n	80027f8 <_free_r+0x74>
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	4401      	add	r1, r0
 80027e4:	1858      	adds	r0, r3, r1
 80027e6:	4282      	cmp	r2, r0
 80027e8:	6019      	str	r1, [r3, #0]
 80027ea:	d1dd      	bne.n	80027a8 <_free_r+0x24>
 80027ec:	6810      	ldr	r0, [r2, #0]
 80027ee:	6852      	ldr	r2, [r2, #4]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	4401      	add	r1, r0
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	e7d7      	b.n	80027a8 <_free_r+0x24>
 80027f8:	d902      	bls.n	8002800 <_free_r+0x7c>
 80027fa:	230c      	movs	r3, #12
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	e7d3      	b.n	80027a8 <_free_r+0x24>
 8002800:	6820      	ldr	r0, [r4, #0]
 8002802:	1821      	adds	r1, r4, r0
 8002804:	428a      	cmp	r2, r1
 8002806:	bf04      	itt	eq
 8002808:	6811      	ldreq	r1, [r2, #0]
 800280a:	6852      	ldreq	r2, [r2, #4]
 800280c:	6062      	str	r2, [r4, #4]
 800280e:	bf04      	itt	eq
 8002810:	1809      	addeq	r1, r1, r0
 8002812:	6021      	streq	r1, [r4, #0]
 8002814:	605c      	str	r4, [r3, #4]
 8002816:	e7c7      	b.n	80027a8 <_free_r+0x24>
 8002818:	bd38      	pop	{r3, r4, r5, pc}
 800281a:	bf00      	nop
 800281c:	200001e4 	.word	0x200001e4

08002820 <_malloc_r>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	1ccd      	adds	r5, r1, #3
 8002824:	f025 0503 	bic.w	r5, r5, #3
 8002828:	3508      	adds	r5, #8
 800282a:	2d0c      	cmp	r5, #12
 800282c:	bf38      	it	cc
 800282e:	250c      	movcc	r5, #12
 8002830:	2d00      	cmp	r5, #0
 8002832:	4606      	mov	r6, r0
 8002834:	db01      	blt.n	800283a <_malloc_r+0x1a>
 8002836:	42a9      	cmp	r1, r5
 8002838:	d903      	bls.n	8002842 <_malloc_r+0x22>
 800283a:	230c      	movs	r3, #12
 800283c:	6033      	str	r3, [r6, #0]
 800283e:	2000      	movs	r0, #0
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	f000 fb59 	bl	8002ef8 <__malloc_lock>
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <_malloc_r+0xac>)
 8002848:	6814      	ldr	r4, [r2, #0]
 800284a:	4621      	mov	r1, r4
 800284c:	b991      	cbnz	r1, 8002874 <_malloc_r+0x54>
 800284e:	4c20      	ldr	r4, [pc, #128]	; (80028d0 <_malloc_r+0xb0>)
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	b91b      	cbnz	r3, 800285c <_malloc_r+0x3c>
 8002854:	4630      	mov	r0, r6
 8002856:	f000 f8a1 	bl	800299c <_sbrk_r>
 800285a:	6020      	str	r0, [r4, #0]
 800285c:	4629      	mov	r1, r5
 800285e:	4630      	mov	r0, r6
 8002860:	f000 f89c 	bl	800299c <_sbrk_r>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d124      	bne.n	80028b2 <_malloc_r+0x92>
 8002868:	230c      	movs	r3, #12
 800286a:	6033      	str	r3, [r6, #0]
 800286c:	4630      	mov	r0, r6
 800286e:	f000 fb44 	bl	8002efa <__malloc_unlock>
 8002872:	e7e4      	b.n	800283e <_malloc_r+0x1e>
 8002874:	680b      	ldr	r3, [r1, #0]
 8002876:	1b5b      	subs	r3, r3, r5
 8002878:	d418      	bmi.n	80028ac <_malloc_r+0x8c>
 800287a:	2b0b      	cmp	r3, #11
 800287c:	d90f      	bls.n	800289e <_malloc_r+0x7e>
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	50cd      	str	r5, [r1, r3]
 8002882:	18cc      	adds	r4, r1, r3
 8002884:	4630      	mov	r0, r6
 8002886:	f000 fb38 	bl	8002efa <__malloc_unlock>
 800288a:	f104 000b 	add.w	r0, r4, #11
 800288e:	1d23      	adds	r3, r4, #4
 8002890:	f020 0007 	bic.w	r0, r0, #7
 8002894:	1ac3      	subs	r3, r0, r3
 8002896:	d0d3      	beq.n	8002840 <_malloc_r+0x20>
 8002898:	425a      	negs	r2, r3
 800289a:	50e2      	str	r2, [r4, r3]
 800289c:	e7d0      	b.n	8002840 <_malloc_r+0x20>
 800289e:	428c      	cmp	r4, r1
 80028a0:	684b      	ldr	r3, [r1, #4]
 80028a2:	bf16      	itet	ne
 80028a4:	6063      	strne	r3, [r4, #4]
 80028a6:	6013      	streq	r3, [r2, #0]
 80028a8:	460c      	movne	r4, r1
 80028aa:	e7eb      	b.n	8002884 <_malloc_r+0x64>
 80028ac:	460c      	mov	r4, r1
 80028ae:	6849      	ldr	r1, [r1, #4]
 80028b0:	e7cc      	b.n	800284c <_malloc_r+0x2c>
 80028b2:	1cc4      	adds	r4, r0, #3
 80028b4:	f024 0403 	bic.w	r4, r4, #3
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	d005      	beq.n	80028c8 <_malloc_r+0xa8>
 80028bc:	1a21      	subs	r1, r4, r0
 80028be:	4630      	mov	r0, r6
 80028c0:	f000 f86c 	bl	800299c <_sbrk_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d0cf      	beq.n	8002868 <_malloc_r+0x48>
 80028c8:	6025      	str	r5, [r4, #0]
 80028ca:	e7db      	b.n	8002884 <_malloc_r+0x64>
 80028cc:	200001e4 	.word	0x200001e4
 80028d0:	200001e8 	.word	0x200001e8

080028d4 <_puts_r>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	460e      	mov	r6, r1
 80028d8:	4605      	mov	r5, r0
 80028da:	b118      	cbz	r0, 80028e4 <_puts_r+0x10>
 80028dc:	6983      	ldr	r3, [r0, #24]
 80028de:	b90b      	cbnz	r3, 80028e4 <_puts_r+0x10>
 80028e0:	f000 fa1c 	bl	8002d1c <__sinit>
 80028e4:	69ab      	ldr	r3, [r5, #24]
 80028e6:	68ac      	ldr	r4, [r5, #8]
 80028e8:	b913      	cbnz	r3, 80028f0 <_puts_r+0x1c>
 80028ea:	4628      	mov	r0, r5
 80028ec:	f000 fa16 	bl	8002d1c <__sinit>
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <_puts_r+0xac>)
 80028f2:	429c      	cmp	r4, r3
 80028f4:	d117      	bne.n	8002926 <_puts_r+0x52>
 80028f6:	686c      	ldr	r4, [r5, #4]
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	071b      	lsls	r3, r3, #28
 80028fc:	d51d      	bpl.n	800293a <_puts_r+0x66>
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	b1db      	cbz	r3, 800293a <_puts_r+0x66>
 8002902:	3e01      	subs	r6, #1
 8002904:	68a3      	ldr	r3, [r4, #8]
 8002906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800290a:	3b01      	subs	r3, #1
 800290c:	60a3      	str	r3, [r4, #8]
 800290e:	b9e9      	cbnz	r1, 800294c <_puts_r+0x78>
 8002910:	2b00      	cmp	r3, #0
 8002912:	da2e      	bge.n	8002972 <_puts_r+0x9e>
 8002914:	4622      	mov	r2, r4
 8002916:	210a      	movs	r1, #10
 8002918:	4628      	mov	r0, r5
 800291a:	f000 f84f 	bl	80029bc <__swbuf_r>
 800291e:	3001      	adds	r0, #1
 8002920:	d011      	beq.n	8002946 <_puts_r+0x72>
 8002922:	200a      	movs	r0, #10
 8002924:	e011      	b.n	800294a <_puts_r+0x76>
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <_puts_r+0xb0>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d101      	bne.n	8002930 <_puts_r+0x5c>
 800292c:	68ac      	ldr	r4, [r5, #8]
 800292e:	e7e3      	b.n	80028f8 <_puts_r+0x24>
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_puts_r+0xb4>)
 8002932:	429c      	cmp	r4, r3
 8002934:	bf08      	it	eq
 8002936:	68ec      	ldreq	r4, [r5, #12]
 8002938:	e7de      	b.n	80028f8 <_puts_r+0x24>
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 f88f 	bl	8002a60 <__swsetup_r>
 8002942:	2800      	cmp	r0, #0
 8002944:	d0dd      	beq.n	8002902 <_puts_r+0x2e>
 8002946:	f04f 30ff 	mov.w	r0, #4294967295
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	2b00      	cmp	r3, #0
 800294e:	da04      	bge.n	800295a <_puts_r+0x86>
 8002950:	69a2      	ldr	r2, [r4, #24]
 8002952:	429a      	cmp	r2, r3
 8002954:	dc06      	bgt.n	8002964 <_puts_r+0x90>
 8002956:	290a      	cmp	r1, #10
 8002958:	d004      	beq.n	8002964 <_puts_r+0x90>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	6022      	str	r2, [r4, #0]
 8002960:	7019      	strb	r1, [r3, #0]
 8002962:	e7cf      	b.n	8002904 <_puts_r+0x30>
 8002964:	4622      	mov	r2, r4
 8002966:	4628      	mov	r0, r5
 8002968:	f000 f828 	bl	80029bc <__swbuf_r>
 800296c:	3001      	adds	r0, #1
 800296e:	d1c9      	bne.n	8002904 <_puts_r+0x30>
 8002970:	e7e9      	b.n	8002946 <_puts_r+0x72>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	200a      	movs	r0, #10
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	6022      	str	r2, [r4, #0]
 800297a:	7018      	strb	r0, [r3, #0]
 800297c:	e7e5      	b.n	800294a <_puts_r+0x76>
 800297e:	bf00      	nop
 8002980:	0800365c 	.word	0x0800365c
 8002984:	0800367c 	.word	0x0800367c
 8002988:	0800363c 	.word	0x0800363c

0800298c <puts>:
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <puts+0xc>)
 800298e:	4601      	mov	r1, r0
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f7ff bf9f 	b.w	80028d4 <_puts_r>
 8002996:	bf00      	nop
 8002998:	20000008 	.word	0x20000008

0800299c <_sbrk_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	4c06      	ldr	r4, [pc, #24]	; (80029b8 <_sbrk_r+0x1c>)
 80029a0:	2300      	movs	r3, #0
 80029a2:	4605      	mov	r5, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	6023      	str	r3, [r4, #0]
 80029a8:	f7fd fc82 	bl	80002b0 <_sbrk>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_sbrk_r+0x1a>
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_sbrk_r+0x1a>
 80029b4:	602b      	str	r3, [r5, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	200002d8 	.word	0x200002d8

080029bc <__swbuf_r>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	460e      	mov	r6, r1
 80029c0:	4614      	mov	r4, r2
 80029c2:	4605      	mov	r5, r0
 80029c4:	b118      	cbz	r0, 80029ce <__swbuf_r+0x12>
 80029c6:	6983      	ldr	r3, [r0, #24]
 80029c8:	b90b      	cbnz	r3, 80029ce <__swbuf_r+0x12>
 80029ca:	f000 f9a7 	bl	8002d1c <__sinit>
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <__swbuf_r+0x98>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d12a      	bne.n	8002a2a <__swbuf_r+0x6e>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	69a3      	ldr	r3, [r4, #24]
 80029d8:	60a3      	str	r3, [r4, #8]
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	071a      	lsls	r2, r3, #28
 80029de:	d52e      	bpl.n	8002a3e <__swbuf_r+0x82>
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	b363      	cbz	r3, 8002a3e <__swbuf_r+0x82>
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	1ac0      	subs	r0, r0, r3
 80029ea:	6963      	ldr	r3, [r4, #20]
 80029ec:	b2f6      	uxtb	r6, r6
 80029ee:	4283      	cmp	r3, r0
 80029f0:	4637      	mov	r7, r6
 80029f2:	dc04      	bgt.n	80029fe <__swbuf_r+0x42>
 80029f4:	4621      	mov	r1, r4
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 f926 	bl	8002c48 <_fflush_r>
 80029fc:	bb28      	cbnz	r0, 8002a4a <__swbuf_r+0x8e>
 80029fe:	68a3      	ldr	r3, [r4, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60a3      	str	r3, [r4, #8]
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	6022      	str	r2, [r4, #0]
 8002a0a:	701e      	strb	r6, [r3, #0]
 8002a0c:	6963      	ldr	r3, [r4, #20]
 8002a0e:	3001      	adds	r0, #1
 8002a10:	4283      	cmp	r3, r0
 8002a12:	d004      	beq.n	8002a1e <__swbuf_r+0x62>
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	07db      	lsls	r3, r3, #31
 8002a18:	d519      	bpl.n	8002a4e <__swbuf_r+0x92>
 8002a1a:	2e0a      	cmp	r6, #10
 8002a1c:	d117      	bne.n	8002a4e <__swbuf_r+0x92>
 8002a1e:	4621      	mov	r1, r4
 8002a20:	4628      	mov	r0, r5
 8002a22:	f000 f911 	bl	8002c48 <_fflush_r>
 8002a26:	b190      	cbz	r0, 8002a4e <__swbuf_r+0x92>
 8002a28:	e00f      	b.n	8002a4a <__swbuf_r+0x8e>
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <__swbuf_r+0x9c>)
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	d101      	bne.n	8002a34 <__swbuf_r+0x78>
 8002a30:	68ac      	ldr	r4, [r5, #8]
 8002a32:	e7d0      	b.n	80029d6 <__swbuf_r+0x1a>
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <__swbuf_r+0xa0>)
 8002a36:	429c      	cmp	r4, r3
 8002a38:	bf08      	it	eq
 8002a3a:	68ec      	ldreq	r4, [r5, #12]
 8002a3c:	e7cb      	b.n	80029d6 <__swbuf_r+0x1a>
 8002a3e:	4621      	mov	r1, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 f80d 	bl	8002a60 <__swsetup_r>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0cc      	beq.n	80029e4 <__swbuf_r+0x28>
 8002a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8002a4e:	4638      	mov	r0, r7
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800365c 	.word	0x0800365c
 8002a58:	0800367c 	.word	0x0800367c
 8002a5c:	0800363c 	.word	0x0800363c

08002a60 <__swsetup_r>:
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <__swsetup_r+0xcc>)
 8002a62:	b570      	push	{r4, r5, r6, lr}
 8002a64:	681d      	ldr	r5, [r3, #0]
 8002a66:	4606      	mov	r6, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	b125      	cbz	r5, 8002a76 <__swsetup_r+0x16>
 8002a6c:	69ab      	ldr	r3, [r5, #24]
 8002a6e:	b913      	cbnz	r3, 8002a76 <__swsetup_r+0x16>
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 f953 	bl	8002d1c <__sinit>
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <__swsetup_r+0xd0>)
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	d10f      	bne.n	8002a9c <__swsetup_r+0x3c>
 8002a7c:	686c      	ldr	r4, [r5, #4]
 8002a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	0715      	lsls	r5, r2, #28
 8002a86:	d42c      	bmi.n	8002ae2 <__swsetup_r+0x82>
 8002a88:	06d0      	lsls	r0, r2, #27
 8002a8a:	d411      	bmi.n	8002ab0 <__swsetup_r+0x50>
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	6032      	str	r2, [r6, #0]
 8002a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	e03e      	b.n	8002b1a <__swsetup_r+0xba>
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <__swsetup_r+0xd4>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	d101      	bne.n	8002aa6 <__swsetup_r+0x46>
 8002aa2:	68ac      	ldr	r4, [r5, #8]
 8002aa4:	e7eb      	b.n	8002a7e <__swsetup_r+0x1e>
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <__swsetup_r+0xd8>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	bf08      	it	eq
 8002aac:	68ec      	ldreq	r4, [r5, #12]
 8002aae:	e7e6      	b.n	8002a7e <__swsetup_r+0x1e>
 8002ab0:	0751      	lsls	r1, r2, #29
 8002ab2:	d512      	bpl.n	8002ada <__swsetup_r+0x7a>
 8002ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ab6:	b141      	cbz	r1, 8002aca <__swsetup_r+0x6a>
 8002ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002abc:	4299      	cmp	r1, r3
 8002abe:	d002      	beq.n	8002ac6 <__swsetup_r+0x66>
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7ff fe5f 	bl	8002784 <_free_r>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	6923      	ldr	r3, [r4, #16]
 8002ae4:	b94b      	cbnz	r3, 8002afa <__swsetup_r+0x9a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d003      	beq.n	8002afa <__swsetup_r+0x9a>
 8002af2:	4621      	mov	r1, r4
 8002af4:	4630      	mov	r0, r6
 8002af6:	f000 f9bf 	bl	8002e78 <__smakebuf_r>
 8002afa:	89a2      	ldrh	r2, [r4, #12]
 8002afc:	f012 0301 	ands.w	r3, r2, #1
 8002b00:	d00c      	beq.n	8002b1c <__swsetup_r+0xbc>
 8002b02:	2300      	movs	r3, #0
 8002b04:	60a3      	str	r3, [r4, #8]
 8002b06:	6963      	ldr	r3, [r4, #20]
 8002b08:	425b      	negs	r3, r3
 8002b0a:	61a3      	str	r3, [r4, #24]
 8002b0c:	6923      	ldr	r3, [r4, #16]
 8002b0e:	b953      	cbnz	r3, 8002b26 <__swsetup_r+0xc6>
 8002b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b18:	d1ba      	bne.n	8002a90 <__swsetup_r+0x30>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	0792      	lsls	r2, r2, #30
 8002b1e:	bf58      	it	pl
 8002b20:	6963      	ldrpl	r3, [r4, #20]
 8002b22:	60a3      	str	r3, [r4, #8]
 8002b24:	e7f2      	b.n	8002b0c <__swsetup_r+0xac>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e7f7      	b.n	8002b1a <__swsetup_r+0xba>
 8002b2a:	bf00      	nop
 8002b2c:	20000008 	.word	0x20000008
 8002b30:	0800365c 	.word	0x0800365c
 8002b34:	0800367c 	.word	0x0800367c
 8002b38:	0800363c 	.word	0x0800363c

08002b3c <__sflush_r>:
 8002b3c:	898a      	ldrh	r2, [r1, #12]
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	4605      	mov	r5, r0
 8002b44:	0710      	lsls	r0, r2, #28
 8002b46:	460c      	mov	r4, r1
 8002b48:	d458      	bmi.n	8002bfc <__sflush_r+0xc0>
 8002b4a:	684b      	ldr	r3, [r1, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	dc05      	bgt.n	8002b5c <__sflush_r+0x20>
 8002b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dc02      	bgt.n	8002b5c <__sflush_r+0x20>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b5e:	2e00      	cmp	r6, #0
 8002b60:	d0f9      	beq.n	8002b56 <__sflush_r+0x1a>
 8002b62:	2300      	movs	r3, #0
 8002b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b68:	682f      	ldr	r7, [r5, #0]
 8002b6a:	6a21      	ldr	r1, [r4, #32]
 8002b6c:	602b      	str	r3, [r5, #0]
 8002b6e:	d032      	beq.n	8002bd6 <__sflush_r+0x9a>
 8002b70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	075a      	lsls	r2, r3, #29
 8002b76:	d505      	bpl.n	8002b84 <__sflush_r+0x48>
 8002b78:	6863      	ldr	r3, [r4, #4]
 8002b7a:	1ac0      	subs	r0, r0, r3
 8002b7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b7e:	b10b      	cbz	r3, 8002b84 <__sflush_r+0x48>
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b82:	1ac0      	subs	r0, r0, r3
 8002b84:	2300      	movs	r3, #0
 8002b86:	4602      	mov	r2, r0
 8002b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b8a:	6a21      	ldr	r1, [r4, #32]
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	47b0      	blx	r6
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	d106      	bne.n	8002ba4 <__sflush_r+0x68>
 8002b96:	6829      	ldr	r1, [r5, #0]
 8002b98:	291d      	cmp	r1, #29
 8002b9a:	d848      	bhi.n	8002c2e <__sflush_r+0xf2>
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <__sflush_r+0x108>)
 8002b9e:	40ca      	lsrs	r2, r1
 8002ba0:	07d6      	lsls	r6, r2, #31
 8002ba2:	d544      	bpl.n	8002c2e <__sflush_r+0xf2>
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6062      	str	r2, [r4, #4]
 8002ba8:	04d9      	lsls	r1, r3, #19
 8002baa:	6922      	ldr	r2, [r4, #16]
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	d504      	bpl.n	8002bba <__sflush_r+0x7e>
 8002bb0:	1c42      	adds	r2, r0, #1
 8002bb2:	d101      	bne.n	8002bb8 <__sflush_r+0x7c>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	b903      	cbnz	r3, 8002bba <__sflush_r+0x7e>
 8002bb8:	6560      	str	r0, [r4, #84]	; 0x54
 8002bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bbc:	602f      	str	r7, [r5, #0]
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d0c9      	beq.n	8002b56 <__sflush_r+0x1a>
 8002bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bc6:	4299      	cmp	r1, r3
 8002bc8:	d002      	beq.n	8002bd0 <__sflush_r+0x94>
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f7ff fdda 	bl	8002784 <_free_r>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	6360      	str	r0, [r4, #52]	; 0x34
 8002bd4:	e7c0      	b.n	8002b58 <__sflush_r+0x1c>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4628      	mov	r0, r5
 8002bda:	47b0      	blx	r6
 8002bdc:	1c41      	adds	r1, r0, #1
 8002bde:	d1c8      	bne.n	8002b72 <__sflush_r+0x36>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0c5      	beq.n	8002b72 <__sflush_r+0x36>
 8002be6:	2b1d      	cmp	r3, #29
 8002be8:	d001      	beq.n	8002bee <__sflush_r+0xb2>
 8002bea:	2b16      	cmp	r3, #22
 8002bec:	d101      	bne.n	8002bf2 <__sflush_r+0xb6>
 8002bee:	602f      	str	r7, [r5, #0]
 8002bf0:	e7b1      	b.n	8002b56 <__sflush_r+0x1a>
 8002bf2:	89a3      	ldrh	r3, [r4, #12]
 8002bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf8:	81a3      	strh	r3, [r4, #12]
 8002bfa:	e7ad      	b.n	8002b58 <__sflush_r+0x1c>
 8002bfc:	690f      	ldr	r7, [r1, #16]
 8002bfe:	2f00      	cmp	r7, #0
 8002c00:	d0a9      	beq.n	8002b56 <__sflush_r+0x1a>
 8002c02:	0793      	lsls	r3, r2, #30
 8002c04:	680e      	ldr	r6, [r1, #0]
 8002c06:	bf08      	it	eq
 8002c08:	694b      	ldreq	r3, [r1, #20]
 8002c0a:	600f      	str	r7, [r1, #0]
 8002c0c:	bf18      	it	ne
 8002c0e:	2300      	movne	r3, #0
 8002c10:	eba6 0807 	sub.w	r8, r6, r7
 8002c14:	608b      	str	r3, [r1, #8]
 8002c16:	f1b8 0f00 	cmp.w	r8, #0
 8002c1a:	dd9c      	ble.n	8002b56 <__sflush_r+0x1a>
 8002c1c:	4643      	mov	r3, r8
 8002c1e:	463a      	mov	r2, r7
 8002c20:	6a21      	ldr	r1, [r4, #32]
 8002c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c24:	4628      	mov	r0, r5
 8002c26:	47b0      	blx	r6
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	dc06      	bgt.n	8002c3a <__sflush_r+0xfe>
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	e78e      	b.n	8002b58 <__sflush_r+0x1c>
 8002c3a:	4407      	add	r7, r0
 8002c3c:	eba8 0800 	sub.w	r8, r8, r0
 8002c40:	e7e9      	b.n	8002c16 <__sflush_r+0xda>
 8002c42:	bf00      	nop
 8002c44:	20400001 	.word	0x20400001

08002c48 <_fflush_r>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	690b      	ldr	r3, [r1, #16]
 8002c4c:	4605      	mov	r5, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	b1db      	cbz	r3, 8002c8a <_fflush_r+0x42>
 8002c52:	b118      	cbz	r0, 8002c5c <_fflush_r+0x14>
 8002c54:	6983      	ldr	r3, [r0, #24]
 8002c56:	b90b      	cbnz	r3, 8002c5c <_fflush_r+0x14>
 8002c58:	f000 f860 	bl	8002d1c <__sinit>
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <_fflush_r+0x48>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d109      	bne.n	8002c76 <_fflush_r+0x2e>
 8002c62:	686c      	ldr	r4, [r5, #4]
 8002c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c68:	b17b      	cbz	r3, 8002c8a <_fflush_r+0x42>
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c72:	f7ff bf63 	b.w	8002b3c <__sflush_r>
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <_fflush_r+0x4c>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	d101      	bne.n	8002c80 <_fflush_r+0x38>
 8002c7c:	68ac      	ldr	r4, [r5, #8]
 8002c7e:	e7f1      	b.n	8002c64 <_fflush_r+0x1c>
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <_fflush_r+0x50>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	bf08      	it	eq
 8002c86:	68ec      	ldreq	r4, [r5, #12]
 8002c88:	e7ec      	b.n	8002c64 <_fflush_r+0x1c>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	bf00      	nop
 8002c90:	0800365c 	.word	0x0800365c
 8002c94:	0800367c 	.word	0x0800367c
 8002c98:	0800363c 	.word	0x0800363c

08002c9c <std>:
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ca6:	6083      	str	r3, [r0, #8]
 8002ca8:	8181      	strh	r1, [r0, #12]
 8002caa:	6643      	str	r3, [r0, #100]	; 0x64
 8002cac:	81c2      	strh	r2, [r0, #14]
 8002cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cb2:	6183      	str	r3, [r0, #24]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	305c      	adds	r0, #92	; 0x5c
 8002cba:	f7ff fd5a 	bl	8002772 <memset>
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <std+0x38>)
 8002cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <std+0x3c>)
 8002cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <std+0x40>)
 8002cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <std+0x44>)
 8002ccc:	6224      	str	r4, [r4, #32]
 8002cce:	6323      	str	r3, [r4, #48]	; 0x30
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08002efd 	.word	0x08002efd
 8002cd8:	08002f1f 	.word	0x08002f1f
 8002cdc:	08002f57 	.word	0x08002f57
 8002ce0:	08002f7b 	.word	0x08002f7b

08002ce4 <_cleanup_r>:
 8002ce4:	4901      	ldr	r1, [pc, #4]	; (8002cec <_cleanup_r+0x8>)
 8002ce6:	f000 b885 	b.w	8002df4 <_fwalk_reent>
 8002cea:	bf00      	nop
 8002cec:	08002c49 	.word	0x08002c49

08002cf0 <__sfmoreglue>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	1e4a      	subs	r2, r1, #1
 8002cf4:	2568      	movs	r5, #104	; 0x68
 8002cf6:	4355      	muls	r5, r2
 8002cf8:	460e      	mov	r6, r1
 8002cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cfe:	f7ff fd8f 	bl	8002820 <_malloc_r>
 8002d02:	4604      	mov	r4, r0
 8002d04:	b140      	cbz	r0, 8002d18 <__sfmoreglue+0x28>
 8002d06:	2100      	movs	r1, #0
 8002d08:	e9c0 1600 	strd	r1, r6, [r0]
 8002d0c:	300c      	adds	r0, #12
 8002d0e:	60a0      	str	r0, [r4, #8]
 8002d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d14:	f7ff fd2d 	bl	8002772 <memset>
 8002d18:	4620      	mov	r0, r4
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}

08002d1c <__sinit>:
 8002d1c:	6983      	ldr	r3, [r0, #24]
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	4604      	mov	r4, r0
 8002d22:	bb33      	cbnz	r3, 8002d72 <__sinit+0x56>
 8002d24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002d28:	6503      	str	r3, [r0, #80]	; 0x50
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <__sinit+0x58>)
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <__sinit+0x5c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6282      	str	r2, [r0, #40]	; 0x28
 8002d32:	4298      	cmp	r0, r3
 8002d34:	bf04      	itt	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	6183      	streq	r3, [r0, #24]
 8002d3a:	f000 f81f 	bl	8002d7c <__sfp>
 8002d3e:	6060      	str	r0, [r4, #4]
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 f81b 	bl	8002d7c <__sfp>
 8002d46:	60a0      	str	r0, [r4, #8]
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f000 f817 	bl	8002d7c <__sfp>
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60e0      	str	r0, [r4, #12]
 8002d52:	2104      	movs	r1, #4
 8002d54:	6860      	ldr	r0, [r4, #4]
 8002d56:	f7ff ffa1 	bl	8002c9c <std>
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2109      	movs	r1, #9
 8002d5e:	68a0      	ldr	r0, [r4, #8]
 8002d60:	f7ff ff9c 	bl	8002c9c <std>
 8002d64:	2202      	movs	r2, #2
 8002d66:	2112      	movs	r1, #18
 8002d68:	68e0      	ldr	r0, [r4, #12]
 8002d6a:	f7ff ff97 	bl	8002c9c <std>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61a3      	str	r3, [r4, #24]
 8002d72:	bd10      	pop	{r4, pc}
 8002d74:	08003638 	.word	0x08003638
 8002d78:	08002ce5 	.word	0x08002ce5

08002d7c <__sfp>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <__sfp+0x70>)
 8002d80:	681e      	ldr	r6, [r3, #0]
 8002d82:	69b3      	ldr	r3, [r6, #24]
 8002d84:	4607      	mov	r7, r0
 8002d86:	b913      	cbnz	r3, 8002d8e <__sfp+0x12>
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f7ff ffc7 	bl	8002d1c <__sinit>
 8002d8e:	3648      	adds	r6, #72	; 0x48
 8002d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	d503      	bpl.n	8002da0 <__sfp+0x24>
 8002d98:	6833      	ldr	r3, [r6, #0]
 8002d9a:	b133      	cbz	r3, 8002daa <__sfp+0x2e>
 8002d9c:	6836      	ldr	r6, [r6, #0]
 8002d9e:	e7f7      	b.n	8002d90 <__sfp+0x14>
 8002da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002da4:	b16d      	cbz	r5, 8002dc2 <__sfp+0x46>
 8002da6:	3468      	adds	r4, #104	; 0x68
 8002da8:	e7f4      	b.n	8002d94 <__sfp+0x18>
 8002daa:	2104      	movs	r1, #4
 8002dac:	4638      	mov	r0, r7
 8002dae:	f7ff ff9f 	bl	8002cf0 <__sfmoreglue>
 8002db2:	6030      	str	r0, [r6, #0]
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d1f1      	bne.n	8002d9c <__sfp+0x20>
 8002db8:	230c      	movs	r3, #12
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <__sfp+0x74>)
 8002dc4:	6665      	str	r5, [r4, #100]	; 0x64
 8002dc6:	e9c4 5500 	strd	r5, r5, [r4]
 8002dca:	60a5      	str	r5, [r4, #8]
 8002dcc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002dd0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ddc:	f7ff fcc9 	bl	8002772 <memset>
 8002de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002de8:	e7e9      	b.n	8002dbe <__sfp+0x42>
 8002dea:	bf00      	nop
 8002dec:	08003638 	.word	0x08003638
 8002df0:	ffff0001 	.word	0xffff0001

08002df4 <_fwalk_reent>:
 8002df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df8:	4680      	mov	r8, r0
 8002dfa:	4689      	mov	r9, r1
 8002dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e00:	2600      	movs	r6, #0
 8002e02:	b914      	cbnz	r4, 8002e0a <_fwalk_reent+0x16>
 8002e04:	4630      	mov	r0, r6
 8002e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002e0e:	3f01      	subs	r7, #1
 8002e10:	d501      	bpl.n	8002e16 <_fwalk_reent+0x22>
 8002e12:	6824      	ldr	r4, [r4, #0]
 8002e14:	e7f5      	b.n	8002e02 <_fwalk_reent+0xe>
 8002e16:	89ab      	ldrh	r3, [r5, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d907      	bls.n	8002e2c <_fwalk_reent+0x38>
 8002e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d003      	beq.n	8002e2c <_fwalk_reent+0x38>
 8002e24:	4629      	mov	r1, r5
 8002e26:	4640      	mov	r0, r8
 8002e28:	47c8      	blx	r9
 8002e2a:	4306      	orrs	r6, r0
 8002e2c:	3568      	adds	r5, #104	; 0x68
 8002e2e:	e7ee      	b.n	8002e0e <_fwalk_reent+0x1a>

08002e30 <__swhatbuf_r>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	460e      	mov	r6, r1
 8002e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	b096      	sub	sp, #88	; 0x58
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	da07      	bge.n	8002e52 <__swhatbuf_r+0x22>
 8002e42:	2300      	movs	r3, #0
 8002e44:	602b      	str	r3, [r5, #0]
 8002e46:	89b3      	ldrh	r3, [r6, #12]
 8002e48:	061a      	lsls	r2, r3, #24
 8002e4a:	d410      	bmi.n	8002e6e <__swhatbuf_r+0x3e>
 8002e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e50:	e00e      	b.n	8002e70 <__swhatbuf_r+0x40>
 8002e52:	466a      	mov	r2, sp
 8002e54:	f000 f8b8 	bl	8002fc8 <_fstat_r>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	dbf2      	blt.n	8002e42 <__swhatbuf_r+0x12>
 8002e5c:	9a01      	ldr	r2, [sp, #4]
 8002e5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e66:	425a      	negs	r2, r3
 8002e68:	415a      	adcs	r2, r3
 8002e6a:	602a      	str	r2, [r5, #0]
 8002e6c:	e7ee      	b.n	8002e4c <__swhatbuf_r+0x1c>
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	2000      	movs	r0, #0
 8002e72:	6023      	str	r3, [r4, #0]
 8002e74:	b016      	add	sp, #88	; 0x58
 8002e76:	bd70      	pop	{r4, r5, r6, pc}

08002e78 <__smakebuf_r>:
 8002e78:	898b      	ldrh	r3, [r1, #12]
 8002e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e7c:	079d      	lsls	r5, r3, #30
 8002e7e:	4606      	mov	r6, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	d507      	bpl.n	8002e94 <__smakebuf_r+0x1c>
 8002e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	6123      	str	r3, [r4, #16]
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	6163      	str	r3, [r4, #20]
 8002e90:	b002      	add	sp, #8
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	ab01      	add	r3, sp, #4
 8002e96:	466a      	mov	r2, sp
 8002e98:	f7ff ffca 	bl	8002e30 <__swhatbuf_r>
 8002e9c:	9900      	ldr	r1, [sp, #0]
 8002e9e:	4605      	mov	r5, r0
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f7ff fcbd 	bl	8002820 <_malloc_r>
 8002ea6:	b948      	cbnz	r0, 8002ebc <__smakebuf_r+0x44>
 8002ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eac:	059a      	lsls	r2, r3, #22
 8002eae:	d4ef      	bmi.n	8002e90 <__smakebuf_r+0x18>
 8002eb0:	f023 0303 	bic.w	r3, r3, #3
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	81a3      	strh	r3, [r4, #12]
 8002eba:	e7e3      	b.n	8002e84 <__smakebuf_r+0xc>
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <__smakebuf_r+0x7c>)
 8002ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	6020      	str	r0, [r4, #0]
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	9b00      	ldr	r3, [sp, #0]
 8002ecc:	6163      	str	r3, [r4, #20]
 8002ece:	9b01      	ldr	r3, [sp, #4]
 8002ed0:	6120      	str	r0, [r4, #16]
 8002ed2:	b15b      	cbz	r3, 8002eec <__smakebuf_r+0x74>
 8002ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f000 f887 	bl	8002fec <_isatty_r>
 8002ede:	b128      	cbz	r0, 8002eec <__smakebuf_r+0x74>
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	81a3      	strh	r3, [r4, #12]
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	431d      	orrs	r5, r3
 8002ef0:	81a5      	strh	r5, [r4, #12]
 8002ef2:	e7cd      	b.n	8002e90 <__smakebuf_r+0x18>
 8002ef4:	08002ce5 	.word	0x08002ce5

08002ef8 <__malloc_lock>:
 8002ef8:	4770      	bx	lr

08002efa <__malloc_unlock>:
 8002efa:	4770      	bx	lr

08002efc <__sread>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	460c      	mov	r4, r1
 8002f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f04:	f000 f894 	bl	8003030 <_read_r>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	bfab      	itete	ge
 8002f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f10:	181b      	addge	r3, r3, r0
 8002f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f16:	bfac      	ite	ge
 8002f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f1a:	81a3      	strhlt	r3, [r4, #12]
 8002f1c:	bd10      	pop	{r4, pc}

08002f1e <__swrite>:
 8002f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f22:	461f      	mov	r7, r3
 8002f24:	898b      	ldrh	r3, [r1, #12]
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	4605      	mov	r5, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4616      	mov	r6, r2
 8002f2e:	d505      	bpl.n	8002f3c <__swrite+0x1e>
 8002f30:	2302      	movs	r3, #2
 8002f32:	2200      	movs	r2, #0
 8002f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f38:	f000 f868 	bl	800300c <_lseek_r>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	4632      	mov	r2, r6
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f52:	f000 b817 	b.w	8002f84 <_write_r>

08002f56 <__sseek>:
 8002f56:	b510      	push	{r4, lr}
 8002f58:	460c      	mov	r4, r1
 8002f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5e:	f000 f855 	bl	800300c <_lseek_r>
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	bf15      	itete	ne
 8002f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f72:	81a3      	strheq	r3, [r4, #12]
 8002f74:	bf18      	it	ne
 8002f76:	81a3      	strhne	r3, [r4, #12]
 8002f78:	bd10      	pop	{r4, pc}

08002f7a <__sclose>:
 8002f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f7e:	f000 b813 	b.w	8002fa8 <_close_r>
	...

08002f84 <_write_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4c07      	ldr	r4, [pc, #28]	; (8002fa4 <_write_r+0x20>)
 8002f88:	4605      	mov	r5, r0
 8002f8a:	4608      	mov	r0, r1
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	2200      	movs	r2, #0
 8002f90:	6022      	str	r2, [r4, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f90f 	bl	80031b6 <_write>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d102      	bne.n	8002fa2 <_write_r+0x1e>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	b103      	cbz	r3, 8002fa2 <_write_r+0x1e>
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	200002d8 	.word	0x200002d8

08002fa8 <_close_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4c06      	ldr	r4, [pc, #24]	; (8002fc4 <_close_r+0x1c>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	4605      	mov	r5, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	f000 f92e 	bl	8003214 <_close>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_close_r+0x1a>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_close_r+0x1a>
 8002fc0:	602b      	str	r3, [r5, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	200002d8 	.word	0x200002d8

08002fc8 <_fstat_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4c07      	ldr	r4, [pc, #28]	; (8002fe8 <_fstat_r+0x20>)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	4605      	mov	r5, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	f000 f964 	bl	80032a2 <_fstat>
 8002fda:	1c43      	adds	r3, r0, #1
 8002fdc:	d102      	bne.n	8002fe4 <_fstat_r+0x1c>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	b103      	cbz	r3, 8002fe4 <_fstat_r+0x1c>
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	bd38      	pop	{r3, r4, r5, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200002d8 	.word	0x200002d8

08002fec <_isatty_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4c06      	ldr	r4, [pc, #24]	; (8003008 <_isatty_r+0x1c>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	f000 fab8 	bl	800356c <_isatty>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	d102      	bne.n	8003006 <_isatty_r+0x1a>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	b103      	cbz	r3, 8003006 <_isatty_r+0x1a>
 8003004:	602b      	str	r3, [r5, #0]
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	200002d8 	.word	0x200002d8

0800300c <_lseek_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4c07      	ldr	r4, [pc, #28]	; (800302c <_lseek_r+0x20>)
 8003010:	4605      	mov	r5, r0
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	2200      	movs	r2, #0
 8003018:	6022      	str	r2, [r4, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f8b9 	bl	8003192 <_lseek>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_lseek_r+0x1e>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	b103      	cbz	r3, 800302a <_lseek_r+0x1e>
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	200002d8 	.word	0x200002d8

08003030 <_read_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4c07      	ldr	r4, [pc, #28]	; (8003050 <_read_r+0x20>)
 8003034:	4605      	mov	r5, r0
 8003036:	4608      	mov	r0, r1
 8003038:	4611      	mov	r1, r2
 800303a:	2200      	movs	r2, #0
 800303c:	6022      	str	r2, [r4, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f850 	bl	80030e4 <_read>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d102      	bne.n	800304e <_read_r+0x1e>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	b103      	cbz	r3, 800304e <_read_r+0x1e>
 800304c:	602b      	str	r3, [r5, #0]
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	200002d8 	.word	0x200002d8

08003054 <findslot>:
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <findslot+0x2c>)
 8003056:	b510      	push	{r4, lr}
 8003058:	4604      	mov	r4, r0
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	b118      	cbz	r0, 8003066 <findslot+0x12>
 800305e:	6983      	ldr	r3, [r0, #24]
 8003060:	b90b      	cbnz	r3, 8003066 <findslot+0x12>
 8003062:	f7ff fe5b 	bl	8002d1c <__sinit>
 8003066:	2c13      	cmp	r4, #19
 8003068:	d807      	bhi.n	800307a <findslot+0x26>
 800306a:	4806      	ldr	r0, [pc, #24]	; (8003084 <findslot+0x30>)
 800306c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8003070:	3301      	adds	r3, #1
 8003072:	d002      	beq.n	800307a <findslot+0x26>
 8003074:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003078:	bd10      	pop	{r4, pc}
 800307a:	2000      	movs	r0, #0
 800307c:	e7fc      	b.n	8003078 <findslot+0x24>
 800307e:	bf00      	nop
 8003080:	20000008 	.word	0x20000008
 8003084:	200001f8 	.word	0x200001f8

08003088 <checkerror>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	1c43      	adds	r3, r0, #1
 800308c:	4605      	mov	r5, r0
 800308e:	d109      	bne.n	80030a4 <checkerror+0x1c>
 8003090:	f7ff fb2a 	bl	80026e8 <__errno>
 8003094:	2413      	movs	r4, #19
 8003096:	4606      	mov	r6, r0
 8003098:	2700      	movs	r7, #0
 800309a:	4620      	mov	r0, r4
 800309c:	4639      	mov	r1, r7
 800309e:	beab      	bkpt	0x00ab
 80030a0:	4604      	mov	r4, r0
 80030a2:	6034      	str	r4, [r6, #0]
 80030a4:	4628      	mov	r0, r5
 80030a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030a8 <error>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	4605      	mov	r5, r0
 80030ac:	f7ff fb1c 	bl	80026e8 <__errno>
 80030b0:	2413      	movs	r4, #19
 80030b2:	4606      	mov	r6, r0
 80030b4:	2700      	movs	r7, #0
 80030b6:	4620      	mov	r0, r4
 80030b8:	4639      	mov	r1, r7
 80030ba:	beab      	bkpt	0x00ab
 80030bc:	4604      	mov	r4, r0
 80030be:	6034      	str	r4, [r6, #0]
 80030c0:	4628      	mov	r0, r5
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030c4 <_swiread>:
 80030c4:	b530      	push	{r4, r5, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	2406      	movs	r4, #6
 80030d0:	ad01      	add	r5, sp, #4
 80030d2:	4620      	mov	r0, r4
 80030d4:	4629      	mov	r1, r5
 80030d6:	beab      	bkpt	0x00ab
 80030d8:	4604      	mov	r4, r0
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff ffd4 	bl	8003088 <checkerror>
 80030e0:	b005      	add	sp, #20
 80030e2:	bd30      	pop	{r4, r5, pc}

080030e4 <_read>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	460e      	mov	r6, r1
 80030e8:	4615      	mov	r5, r2
 80030ea:	f7ff ffb3 	bl	8003054 <findslot>
 80030ee:	4604      	mov	r4, r0
 80030f0:	b930      	cbnz	r0, 8003100 <_read+0x1c>
 80030f2:	f7ff faf9 	bl	80026e8 <__errno>
 80030f6:	2309      	movs	r3, #9
 80030f8:	6003      	str	r3, [r0, #0]
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	462a      	mov	r2, r5
 8003102:	4631      	mov	r1, r6
 8003104:	6800      	ldr	r0, [r0, #0]
 8003106:	f7ff ffdd 	bl	80030c4 <_swiread>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	bf1f      	itttt	ne
 800310e:	6863      	ldrne	r3, [r4, #4]
 8003110:	1a28      	subne	r0, r5, r0
 8003112:	181b      	addne	r3, r3, r0
 8003114:	6063      	strne	r3, [r4, #4]
 8003116:	e7f2      	b.n	80030fe <_read+0x1a>

08003118 <_swilseek>:
 8003118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800311a:	460c      	mov	r4, r1
 800311c:	4616      	mov	r6, r2
 800311e:	f7ff ff99 	bl	8003054 <findslot>
 8003122:	4605      	mov	r5, r0
 8003124:	b940      	cbnz	r0, 8003138 <_swilseek+0x20>
 8003126:	f7ff fadf 	bl	80026e8 <__errno>
 800312a:	2309      	movs	r3, #9
 800312c:	6003      	str	r3, [r0, #0]
 800312e:	f04f 34ff 	mov.w	r4, #4294967295
 8003132:	4620      	mov	r0, r4
 8003134:	b003      	add	sp, #12
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003138:	2e02      	cmp	r6, #2
 800313a:	d903      	bls.n	8003144 <_swilseek+0x2c>
 800313c:	f7ff fad4 	bl	80026e8 <__errno>
 8003140:	2316      	movs	r3, #22
 8003142:	e7f3      	b.n	800312c <_swilseek+0x14>
 8003144:	2e01      	cmp	r6, #1
 8003146:	d112      	bne.n	800316e <_swilseek+0x56>
 8003148:	6843      	ldr	r3, [r0, #4]
 800314a:	18e4      	adds	r4, r4, r3
 800314c:	d4f6      	bmi.n	800313c <_swilseek+0x24>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	260a      	movs	r6, #10
 8003152:	e9cd 3400 	strd	r3, r4, [sp]
 8003156:	466f      	mov	r7, sp
 8003158:	4630      	mov	r0, r6
 800315a:	4639      	mov	r1, r7
 800315c:	beab      	bkpt	0x00ab
 800315e:	4606      	mov	r6, r0
 8003160:	4630      	mov	r0, r6
 8003162:	f7ff ff91 	bl	8003088 <checkerror>
 8003166:	2800      	cmp	r0, #0
 8003168:	dbe1      	blt.n	800312e <_swilseek+0x16>
 800316a:	606c      	str	r4, [r5, #4]
 800316c:	e7e1      	b.n	8003132 <_swilseek+0x1a>
 800316e:	2e02      	cmp	r6, #2
 8003170:	d1ed      	bne.n	800314e <_swilseek+0x36>
 8003172:	af02      	add	r7, sp, #8
 8003174:	6803      	ldr	r3, [r0, #0]
 8003176:	f847 3d08 	str.w	r3, [r7, #-8]!
 800317a:	260c      	movs	r6, #12
 800317c:	4630      	mov	r0, r6
 800317e:	4639      	mov	r1, r7
 8003180:	beab      	bkpt	0x00ab
 8003182:	4606      	mov	r6, r0
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff ff7f 	bl	8003088 <checkerror>
 800318a:	1c43      	adds	r3, r0, #1
 800318c:	d0cf      	beq.n	800312e <_swilseek+0x16>
 800318e:	4404      	add	r4, r0
 8003190:	e7dd      	b.n	800314e <_swilseek+0x36>

08003192 <_lseek>:
 8003192:	f7ff bfc1 	b.w	8003118 <_swilseek>

08003196 <_swiwrite>:
 8003196:	b530      	push	{r4, r5, lr}
 8003198:	b085      	sub	sp, #20
 800319a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800319e:	9203      	str	r2, [sp, #12]
 80031a0:	2405      	movs	r4, #5
 80031a2:	ad01      	add	r5, sp, #4
 80031a4:	4620      	mov	r0, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	beab      	bkpt	0x00ab
 80031aa:	4604      	mov	r4, r0
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7ff ff6b 	bl	8003088 <checkerror>
 80031b2:	b005      	add	sp, #20
 80031b4:	bd30      	pop	{r4, r5, pc}

080031b6 <_write>:
 80031b6:	b570      	push	{r4, r5, r6, lr}
 80031b8:	460e      	mov	r6, r1
 80031ba:	4615      	mov	r5, r2
 80031bc:	f7ff ff4a 	bl	8003054 <findslot>
 80031c0:	4604      	mov	r4, r0
 80031c2:	b930      	cbnz	r0, 80031d2 <_write+0x1c>
 80031c4:	f7ff fa90 	bl	80026e8 <__errno>
 80031c8:	2309      	movs	r3, #9
 80031ca:	6003      	str	r3, [r0, #0]
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	462a      	mov	r2, r5
 80031d4:	4631      	mov	r1, r6
 80031d6:	6800      	ldr	r0, [r0, #0]
 80031d8:	f7ff ffdd 	bl	8003196 <_swiwrite>
 80031dc:	1e02      	subs	r2, r0, #0
 80031de:	dbf5      	blt.n	80031cc <_write+0x16>
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	1aa8      	subs	r0, r5, r2
 80031e4:	4403      	add	r3, r0
 80031e6:	42aa      	cmp	r2, r5
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	d1f1      	bne.n	80031d0 <_write+0x1a>
 80031ec:	2000      	movs	r0, #0
 80031ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031f2:	f7ff bf59 	b.w	80030a8 <error>

080031f6 <_swiclose>:
 80031f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031f8:	ad02      	add	r5, sp, #8
 80031fa:	2402      	movs	r4, #2
 80031fc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	beab      	bkpt	0x00ab
 8003206:	4604      	mov	r4, r0
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ff3d 	bl	8003088 <checkerror>
 800320e:	b003      	add	sp, #12
 8003210:	bd30      	pop	{r4, r5, pc}
	...

08003214 <_close>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4605      	mov	r5, r0
 8003218:	f7ff ff1c 	bl	8003054 <findslot>
 800321c:	4604      	mov	r4, r0
 800321e:	b930      	cbnz	r0, 800322e <_close+0x1a>
 8003220:	f7ff fa62 	bl	80026e8 <__errno>
 8003224:	2309      	movs	r3, #9
 8003226:	6003      	str	r3, [r0, #0]
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	bd38      	pop	{r3, r4, r5, pc}
 800322e:	3d01      	subs	r5, #1
 8003230:	2d01      	cmp	r5, #1
 8003232:	d809      	bhi.n	8003248 <_close+0x34>
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <_close+0x48>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	429a      	cmp	r2, r3
 800323c:	d104      	bne.n	8003248 <_close+0x34>
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	6003      	str	r3, [r0, #0]
 8003244:	2000      	movs	r0, #0
 8003246:	e7f1      	b.n	800322c <_close+0x18>
 8003248:	6820      	ldr	r0, [r4, #0]
 800324a:	f7ff ffd4 	bl	80031f6 <_swiclose>
 800324e:	2800      	cmp	r0, #0
 8003250:	d1ec      	bne.n	800322c <_close+0x18>
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	e7e8      	b.n	800322c <_close+0x18>
 800325a:	bf00      	nop
 800325c:	200001f8 	.word	0x200001f8

08003260 <_swistat>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	460c      	mov	r4, r1
 8003264:	f7ff fef6 	bl	8003054 <findslot>
 8003268:	4606      	mov	r6, r0
 800326a:	b930      	cbnz	r0, 800327a <_swistat+0x1a>
 800326c:	f7ff fa3c 	bl	80026e8 <__errno>
 8003270:	2309      	movs	r3, #9
 8003272:	6003      	str	r3, [r0, #0]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	bd70      	pop	{r4, r5, r6, pc}
 800327a:	6863      	ldr	r3, [r4, #4]
 800327c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003286:	6463      	str	r3, [r4, #68]	; 0x44
 8003288:	250c      	movs	r5, #12
 800328a:	4628      	mov	r0, r5
 800328c:	4631      	mov	r1, r6
 800328e:	beab      	bkpt	0x00ab
 8003290:	4605      	mov	r5, r0
 8003292:	4628      	mov	r0, r5
 8003294:	f7ff fef8 	bl	8003088 <checkerror>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	bf1c      	itt	ne
 800329c:	6120      	strne	r0, [r4, #16]
 800329e:	2000      	movne	r0, #0
 80032a0:	e7ea      	b.n	8003278 <_swistat+0x18>

080032a2 <_fstat>:
 80032a2:	460b      	mov	r3, r1
 80032a4:	b510      	push	{r4, lr}
 80032a6:	2100      	movs	r1, #0
 80032a8:	4604      	mov	r4, r0
 80032aa:	2258      	movs	r2, #88	; 0x58
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fa60 	bl	8002772 <memset>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4620      	mov	r0, r4
 80032b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ba:	f7ff bfd1 	b.w	8003260 <_swistat>

080032be <_stat>:
 80032be:	b538      	push	{r3, r4, r5, lr}
 80032c0:	460d      	mov	r5, r1
 80032c2:	4604      	mov	r4, r0
 80032c4:	2258      	movs	r2, #88	; 0x58
 80032c6:	2100      	movs	r1, #0
 80032c8:	4628      	mov	r0, r5
 80032ca:	f7ff fa52 	bl	8002772 <memset>
 80032ce:	4620      	mov	r0, r4
 80032d0:	2100      	movs	r1, #0
 80032d2:	f000 f811 	bl	80032f8 <_swiopen>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	4604      	mov	r4, r0
 80032da:	d00b      	beq.n	80032f4 <_stat+0x36>
 80032dc:	686b      	ldr	r3, [r5, #4]
 80032de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80032e2:	606b      	str	r3, [r5, #4]
 80032e4:	4629      	mov	r1, r5
 80032e6:	f7ff ffbb 	bl	8003260 <_swistat>
 80032ea:	4605      	mov	r5, r0
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff ff91 	bl	8003214 <_close>
 80032f2:	462c      	mov	r4, r5
 80032f4:	4620      	mov	r0, r4
 80032f6:	bd38      	pop	{r3, r4, r5, pc}

080032f8 <_swiopen>:
 80032f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <_swiopen+0xb4>)
 80032fe:	b096      	sub	sp, #88	; 0x58
 8003300:	4682      	mov	sl, r0
 8003302:	460e      	mov	r6, r1
 8003304:	2500      	movs	r5, #0
 8003306:	4698      	mov	r8, r3
 8003308:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800330c:	1c61      	adds	r1, r4, #1
 800330e:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8003312:	d036      	beq.n	8003382 <_swiopen+0x8a>
 8003314:	3501      	adds	r5, #1
 8003316:	2d14      	cmp	r5, #20
 8003318:	d1f6      	bne.n	8003308 <_swiopen+0x10>
 800331a:	f7ff f9e5 	bl	80026e8 <__errno>
 800331e:	2318      	movs	r3, #24
 8003320:	6003      	str	r3, [r0, #0]
 8003322:	f04f 34ff 	mov.w	r4, #4294967295
 8003326:	e03c      	b.n	80033a2 <_swiopen+0xaa>
 8003328:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800332c:	f240 6301 	movw	r3, #1537	; 0x601
 8003330:	07b2      	lsls	r2, r6, #30
 8003332:	bf48      	it	mi
 8003334:	f044 0402 	orrmi.w	r4, r4, #2
 8003338:	421e      	tst	r6, r3
 800333a:	bf18      	it	ne
 800333c:	f044 0404 	orrne.w	r4, r4, #4
 8003340:	0733      	lsls	r3, r6, #28
 8003342:	bf48      	it	mi
 8003344:	f024 0404 	bicmi.w	r4, r4, #4
 8003348:	4650      	mov	r0, sl
 800334a:	bf48      	it	mi
 800334c:	f044 0408 	orrmi.w	r4, r4, #8
 8003350:	f8cd a000 	str.w	sl, [sp]
 8003354:	f7fc ff44 	bl	80001e0 <strlen>
 8003358:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800335c:	2401      	movs	r4, #1
 800335e:	4620      	mov	r0, r4
 8003360:	4649      	mov	r1, r9
 8003362:	beab      	bkpt	0x00ab
 8003364:	4604      	mov	r4, r0
 8003366:	2c00      	cmp	r4, #0
 8003368:	db06      	blt.n	8003378 <_swiopen+0x80>
 800336a:	4447      	add	r7, r8
 800336c:	2300      	movs	r3, #0
 800336e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	462c      	mov	r4, r5
 8003376:	e014      	b.n	80033a2 <_swiopen+0xaa>
 8003378:	4620      	mov	r0, r4
 800337a:	f7ff fe95 	bl	80030a8 <error>
 800337e:	4604      	mov	r4, r0
 8003380:	e00f      	b.n	80033a2 <_swiopen+0xaa>
 8003382:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003386:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800338a:	46e9      	mov	r9, sp
 800338c:	d1cc      	bne.n	8003328 <_swiopen+0x30>
 800338e:	4649      	mov	r1, r9
 8003390:	4650      	mov	r0, sl
 8003392:	f7ff ff94 	bl	80032be <_stat>
 8003396:	3001      	adds	r0, #1
 8003398:	d0c6      	beq.n	8003328 <_swiopen+0x30>
 800339a:	f7ff f9a5 	bl	80026e8 <__errno>
 800339e:	2311      	movs	r3, #17
 80033a0:	6003      	str	r3, [r0, #0]
 80033a2:	4620      	mov	r0, r4
 80033a4:	b016      	add	sp, #88	; 0x58
 80033a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033aa:	bf00      	nop
 80033ac:	200001f8 	.word	0x200001f8

080033b0 <_get_semihosting_exts>:
 80033b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	4607      	mov	r7, r0
 80033b6:	4688      	mov	r8, r1
 80033b8:	4829      	ldr	r0, [pc, #164]	; (8003460 <_get_semihosting_exts+0xb0>)
 80033ba:	2100      	movs	r1, #0
 80033bc:	4615      	mov	r5, r2
 80033be:	f7ff ff9b 	bl	80032f8 <_swiopen>
 80033c2:	462a      	mov	r2, r5
 80033c4:	4604      	mov	r4, r0
 80033c6:	2100      	movs	r1, #0
 80033c8:	4638      	mov	r0, r7
 80033ca:	f7ff f9d2 	bl	8002772 <memset>
 80033ce:	1c63      	adds	r3, r4, #1
 80033d0:	d015      	beq.n	80033fe <_get_semihosting_exts+0x4e>
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff fe3e 	bl	8003054 <findslot>
 80033d8:	260c      	movs	r6, #12
 80033da:	4681      	mov	r9, r0
 80033dc:	4630      	mov	r0, r6
 80033de:	4649      	mov	r1, r9
 80033e0:	beab      	bkpt	0x00ab
 80033e2:	4606      	mov	r6, r0
 80033e4:	4630      	mov	r0, r6
 80033e6:	f7ff fe4f 	bl	8003088 <checkerror>
 80033ea:	2803      	cmp	r0, #3
 80033ec:	dd02      	ble.n	80033f4 <_get_semihosting_exts+0x44>
 80033ee:	3803      	subs	r0, #3
 80033f0:	42a8      	cmp	r0, r5
 80033f2:	dc08      	bgt.n	8003406 <_get_semihosting_exts+0x56>
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff ff0d 	bl	8003214 <_close>
 80033fa:	f04f 34ff 	mov.w	r4, #4294967295
 80033fe:	4620      	mov	r0, r4
 8003400:	b003      	add	sp, #12
 8003402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003406:	2204      	movs	r2, #4
 8003408:	eb0d 0102 	add.w	r1, sp, r2
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fe69 	bl	80030e4 <_read>
 8003412:	2803      	cmp	r0, #3
 8003414:	ddee      	ble.n	80033f4 <_get_semihosting_exts+0x44>
 8003416:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800341a:	2b53      	cmp	r3, #83	; 0x53
 800341c:	d1ea      	bne.n	80033f4 <_get_semihosting_exts+0x44>
 800341e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003422:	2b48      	cmp	r3, #72	; 0x48
 8003424:	d1e6      	bne.n	80033f4 <_get_semihosting_exts+0x44>
 8003426:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800342a:	2b46      	cmp	r3, #70	; 0x46
 800342c:	d1e2      	bne.n	80033f4 <_get_semihosting_exts+0x44>
 800342e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003432:	2b42      	cmp	r3, #66	; 0x42
 8003434:	d1de      	bne.n	80033f4 <_get_semihosting_exts+0x44>
 8003436:	2201      	movs	r2, #1
 8003438:	4641      	mov	r1, r8
 800343a:	4620      	mov	r0, r4
 800343c:	f7ff fe6c 	bl	8003118 <_swilseek>
 8003440:	2800      	cmp	r0, #0
 8003442:	dbd7      	blt.n	80033f4 <_get_semihosting_exts+0x44>
 8003444:	462a      	mov	r2, r5
 8003446:	4639      	mov	r1, r7
 8003448:	4620      	mov	r0, r4
 800344a:	f7ff fe4b 	bl	80030e4 <_read>
 800344e:	4605      	mov	r5, r0
 8003450:	4620      	mov	r0, r4
 8003452:	f7ff fedf 	bl	8003214 <_close>
 8003456:	4628      	mov	r0, r5
 8003458:	f7ff fe16 	bl	8003088 <checkerror>
 800345c:	4604      	mov	r4, r0
 800345e:	e7ce      	b.n	80033fe <_get_semihosting_exts+0x4e>
 8003460:	0800369c 	.word	0x0800369c

08003464 <initialise_semihosting_exts>:
 8003464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003466:	4d0a      	ldr	r5, [pc, #40]	; (8003490 <initialise_semihosting_exts+0x2c>)
 8003468:	4c0a      	ldr	r4, [pc, #40]	; (8003494 <initialise_semihosting_exts+0x30>)
 800346a:	2100      	movs	r1, #0
 800346c:	2201      	movs	r2, #1
 800346e:	a801      	add	r0, sp, #4
 8003470:	6029      	str	r1, [r5, #0]
 8003472:	6022      	str	r2, [r4, #0]
 8003474:	f7ff ff9c 	bl	80033b0 <_get_semihosting_exts>
 8003478:	2800      	cmp	r0, #0
 800347a:	dd07      	ble.n	800348c <initialise_semihosting_exts+0x28>
 800347c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	b003      	add	sp, #12
 800348e:	bd30      	pop	{r4, r5, pc}
 8003490:	2000006c 	.word	0x2000006c
 8003494:	20000070 	.word	0x20000070

08003498 <_has_ext_stdout_stderr>:
 8003498:	b510      	push	{r4, lr}
 800349a:	4c04      	ldr	r4, [pc, #16]	; (80034ac <_has_ext_stdout_stderr+0x14>)
 800349c:	6822      	ldr	r2, [r4, #0]
 800349e:	2a00      	cmp	r2, #0
 80034a0:	da01      	bge.n	80034a6 <_has_ext_stdout_stderr+0xe>
 80034a2:	f7ff ffdf 	bl	8003464 <initialise_semihosting_exts>
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	bf00      	nop
 80034ac:	20000070 	.word	0x20000070

080034b0 <initialise_monitor_handles>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	b085      	sub	sp, #20
 80034b6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003568 <initialise_monitor_handles+0xb8>
 80034ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80034be:	2303      	movs	r3, #3
 80034c0:	2400      	movs	r4, #0
 80034c2:	9303      	str	r3, [sp, #12]
 80034c4:	f10d 0804 	add.w	r8, sp, #4
 80034c8:	9402      	str	r4, [sp, #8]
 80034ca:	2501      	movs	r5, #1
 80034cc:	4628      	mov	r0, r5
 80034ce:	4641      	mov	r1, r8
 80034d0:	beab      	bkpt	0x00ab
 80034d2:	4605      	mov	r5, r0
 80034d4:	4e20      	ldr	r6, [pc, #128]	; (8003558 <initialise_monitor_handles+0xa8>)
 80034d6:	4a21      	ldr	r2, [pc, #132]	; (800355c <initialise_monitor_handles+0xac>)
 80034d8:	6035      	str	r5, [r6, #0]
 80034da:	4623      	mov	r3, r4
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	4614      	mov	r4, r2
 80034e2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80034e6:	3301      	adds	r3, #1
 80034e8:	2b14      	cmp	r3, #20
 80034ea:	d1fa      	bne.n	80034e2 <initialise_monitor_handles+0x32>
 80034ec:	f7ff ffd4 	bl	8003498 <_has_ext_stdout_stderr>
 80034f0:	4d1b      	ldr	r5, [pc, #108]	; (8003560 <initialise_monitor_handles+0xb0>)
 80034f2:	b1d0      	cbz	r0, 800352a <initialise_monitor_handles+0x7a>
 80034f4:	f04f 0a03 	mov.w	sl, #3
 80034f8:	2304      	movs	r3, #4
 80034fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80034fe:	2701      	movs	r7, #1
 8003500:	f8cd a00c 	str.w	sl, [sp, #12]
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	4638      	mov	r0, r7
 8003508:	4641      	mov	r1, r8
 800350a:	beab      	bkpt	0x00ab
 800350c:	4683      	mov	fp, r0
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <initialise_monitor_handles+0xb4>)
 8003510:	f8cd 9004 	str.w	r9, [sp, #4]
 8003514:	f8c3 b000 	str.w	fp, [r3]
 8003518:	2308      	movs	r3, #8
 800351a:	f8cd a00c 	str.w	sl, [sp, #12]
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	4638      	mov	r0, r7
 8003522:	4641      	mov	r1, r8
 8003524:	beab      	bkpt	0x00ab
 8003526:	4607      	mov	r7, r0
 8003528:	602f      	str	r7, [r5, #0]
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	bf02      	ittt	eq
 8003530:	4b0c      	ldreq	r3, [pc, #48]	; (8003564 <initialise_monitor_handles+0xb4>)
 8003532:	681b      	ldreq	r3, [r3, #0]
 8003534:	602b      	streq	r3, [r5, #0]
 8003536:	6833      	ldr	r3, [r6, #0]
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	2600      	movs	r6, #0
 800353c:	6066      	str	r6, [r4, #4]
 800353e:	f7ff ffab 	bl	8003498 <_has_ext_stdout_stderr>
 8003542:	b130      	cbz	r0, 8003552 <initialise_monitor_handles+0xa2>
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <initialise_monitor_handles+0xb4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003552:	b005      	add	sp, #20
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003558:	200001f0 	.word	0x200001f0
 800355c:	200001f8 	.word	0x200001f8
 8003560:	200001ec 	.word	0x200001ec
 8003564:	200001f4 	.word	0x200001f4
 8003568:	080036b2 	.word	0x080036b2

0800356c <_isatty>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	f7ff fd71 	bl	8003054 <findslot>
 8003572:	2509      	movs	r5, #9
 8003574:	4604      	mov	r4, r0
 8003576:	b920      	cbnz	r0, 8003582 <_isatty+0x16>
 8003578:	f7ff f8b6 	bl	80026e8 <__errno>
 800357c:	6005      	str	r5, [r0, #0]
 800357e:	4620      	mov	r0, r4
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	4628      	mov	r0, r5
 8003584:	4621      	mov	r1, r4
 8003586:	beab      	bkpt	0x00ab
 8003588:	4604      	mov	r4, r0
 800358a:	2c01      	cmp	r4, #1
 800358c:	d0f7      	beq.n	800357e <_isatty+0x12>
 800358e:	f7ff f8ab 	bl	80026e8 <__errno>
 8003592:	2400      	movs	r4, #0
 8003594:	4606      	mov	r6, r0
 8003596:	2513      	movs	r5, #19
 8003598:	4628      	mov	r0, r5
 800359a:	4621      	mov	r1, r4
 800359c:	beab      	bkpt	0x00ab
 800359e:	4605      	mov	r5, r0
 80035a0:	6035      	str	r5, [r6, #0]
 80035a2:	e7ec      	b.n	800357e <_isatty+0x12>

080035a4 <_init>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr

080035b0 <_fini>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	bf00      	nop
 80035b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b6:	bc08      	pop	{r3}
 80035b8:	469e      	mov	lr, r3
 80035ba:	4770      	bx	lr
